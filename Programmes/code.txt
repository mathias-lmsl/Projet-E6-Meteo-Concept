afficherTable.php :

"<?php
require_once 'connectDB.php'; // Connexion à la BDD via $bdd

$tableName = $_GET['table'] ?? 'capteur'; // Table par défaut : capteur
$pdo = $bdd; // Alias pour clarté

$tablesAutorisees = ['capteur', 'carte', 'serre', 'chapelle', 'utilisateur']; // Liste blanche
if (!in_array($tableName, $tablesAutorisees)) {
    http_response_code(400); // Code erreur HTTP
    echo "Table non autorisée.";
    exit;
}

$query = $pdo->query("SELECT * FROM $tableName"); // Exécution de la requête
$rows = $query->fetchAll(PDO::FETCH_ASSOC); // Résultats sous forme associative
$columns = array_keys($rows[0] ?? []); // Noms des colonnes (si des données)
$columns[] = 'Actions'; // Colonne supplémentaire pour boutons

ob_start(); // Démarre la temporisation de sortie
?>

<table class="tabParametrage">
    <thead>
        <tr>
            <?php foreach ($columns as $col): ?>
                <th class="<?= strtolower($col) ?>">
                    <?= htmlspecialchars($col) ?> <!-- Affiche le nom de la colonne -->
                    <?php if ($col === 'Actions' && in_array($tableName, ['carte', 'capteur'])): ?>
                        <img src="../img/plus.svg" alt="Ajouter" class="addImage"
                             title="Ajouter" style="cursor:pointer; margin-left:4px"
                             onclick="openAddModal()"> <!-- Bouton ajouter -->
                    <?php endif; ?>
                </th>
            <?php endforeach; ?>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($rows as $row): ?>
            <tr>
                <?php foreach ($columns as $col): ?>
                    <td class="<?= strtolower($col) ?>">
                        <?php if ($col === 'Actions'): ?>
                            <?php
                                $idKey = array_keys($row)[0]; // Clé primaire (ex : IdCapteur)
                                $id = $row[$idKey]; // Valeur ID
                                $rowJSON = htmlspecialchars(json_encode($row), ENT_QUOTES, 'UTF-8'); // Encodage JSON sécurisé
                            ?>
                            <img src="../img/modifier.svg" alt="Modifier" class="modifyImage"
                                 data-id="<?= $id ?>" data-row="<?= $rowJSON ?>"
                                 onclick="openEditModal(JSON.parse(this.getAttribute('data-row')))"
                                 style="cursor:pointer"> <!-- Bouton modifier -->

                            <img src="../img/moins.svg" alt="Supprimer" class="deleteImage"
                                 data-id="<?= $id ?>" style="cursor:pointer"
                                 onclick="if(confirm('Confirmer suppression ?')) deleteRow('<?= $tableName ?>', <?= $id ?>)">
                                 <!-- Bouton supprimer -->
                        <?php else: ?>
                            <?= htmlspecialchars($row[$col] ?? '') ?> <!-- Affiche valeur cellule -->
                        <?php endif; ?>
                    </td>
                <?php endforeach; ?>
            </tr>
        <?php endforeach; ?>
    </tbody>
</table>

<?php
echo ob_get_clean(); // Affiche le contenu mis en tampon"

checkCapteurInactifs.php :

"<?php
require "connectDB.php"; // Connexion à la base de données

try {
    // 1. Récupère tous les identifiants de capteurs
    $stmt = $bdd->query("SELECT IdCapteur FROM capteur");
    $capteurs = $stmt->fetchAll(PDO::FETCH_COLUMN); // Liste d'IDs (colonne unique)

    $now = new DateTime(); // Date et heure actuelles
    $nbModifies = 0; // Compteur de capteurs modifiés

    foreach ($capteurs as $id) {
        // 2. Récupère l'état actuel du capteur
        $stmtCheck = $bdd->prepare("SELECT EtatComposant FROM capteur WHERE IdCapteur = ?");
        $stmtCheck->execute([$id]);
        $etatActuel = $stmtCheck->fetchColumn();

        // 3. Si le capteur est en veille, on ignore
        if ($etatActuel === 'Veille') continue;

        // 4. Récupère l'horodatage de la dernière mesure du capteur
        $stmtLast = $bdd->prepare("SELECT Horodatage FROM mesure WHERE IdCapteur = ? ORDER BY Horodatage DESC LIMIT 1");
        $stmtLast->execute([$id]);
        $last = $stmtLast->fetch(PDO::FETCH_ASSOC);

        $etat = "OK"; // État par défaut

        if ($last && !empty($last['Horodatage'])) {
            $lastDate = new DateTime($last['Horodatage']); // Conversion horodatage
            $diff = $now->getTimestamp() - $lastDate->getTimestamp(); // Différence en secondes

            if ($diff > 1800) $etat = "HS"; // Si plus de 30 min sans mesure => HS
        } else {
            $etat = "HS"; // Aucun relevé = HS
        }

        // 5. Met à jour l'état du capteur si changement
        if ($etat !== $etatActuel) {
            $stmtUpdate = $bdd->prepare("UPDATE capteur SET EtatComposant = ? WHERE IdCapteur = ?");
            $stmtUpdate->execute([$etat, $id]);
            $nbModifies++; // Incrémente le compteur
        }
    }

    echo "Mise à jour terminée. Capteurs modifiés : $nbModifies";

} catch (PDOException $e) {
    echo "Erreur : " . $e->getMessage(); // Affiche l'erreur SQL si besoin
}
?>"

checkCartesInactives.php :

"<?php
require "connectDB.php"; // Connexion à la base de données

try {
    $stmt = $bdd->query("SELECT DevEui FROM carte"); // Récupère tous les identifiants de cartes
    $cartes = $stmt->fetchAll(PDO::FETCH_COLUMN); // Tableau de DevEui
    $now = new DateTime(); // Heure actuelle
    $nbModifies = 0; // Compteur de mises à jour

    foreach ($cartes as $devEui) {
        // Récupère l’état actuel de la carte
        $stmtCheck = $bdd->prepare("SELECT EtatComposant FROM carte WHERE DevEui = ?");
        $stmtCheck->execute([$devEui]);
        $etatActuel = $stmtCheck->fetchColumn();

        if ($etatActuel === 'Veille') continue; // Ignore les cartes en veille

        // Récupère les capteurs associés à cette carte via la table `possede`
        $stmtCapteurs = $bdd->prepare("SELECT IdCapteur FROM possede WHERE DevEui = ?");
        $stmtCapteurs->execute([$devEui]);
        $capteurs = $stmtCapteurs->fetchAll(PDO::FETCH_COLUMN);

        $latest = null; // Pour stocker la mesure la plus récente

        foreach ($capteurs as $idCapteur) {
            // Récupère la dernière mesure du capteur
            $stmtLast = $bdd->prepare("SELECT Horodatage FROM mesure WHERE IdCapteur = ? ORDER BY Horodatage DESC LIMIT 1");
            $stmtLast->execute([$idCapteur]);
            $last = $stmtLast->fetch(PDO::FETCH_ASSOC);

            // Compare pour garder la plus récente
            if ($last && !empty($last['Horodatage'])) {
                $lastDate = new DateTime($last['Horodatage']);
                if (!$latest || $lastDate > $latest) {
                    $latest = $lastDate;
                }
            }
        }

        $etat = "OK"; // État par défaut

        if ($latest) {
            $diff = $now->getTimestamp() - $latest->getTimestamp(); // Différence en secondes
            if ($diff > 1800) $etat = "HS"; // Si aucune donnée depuis plus de 30 min
        } else {
            $etat = "HS"; // Aucun capteur n'a de données
        }

        // Met à jour l’état si nécessaire
        if ($etat !== $etatActuel) {
            $stmtUpdate = $bdd->prepare("UPDATE carte SET EtatComposant = ? WHERE DevEui = ?");
            $stmtUpdate->execute([$etat, $devEui]);
            $nbModifies++; // Incrémente le compteur
        }
    }

    echo "Cartes mises à jour : $nbModifies"; // Résultat final

} catch (PDOException $e) {
    echo "Erreur : " . $e->getMessage(); // Affiche l’erreur SQL
}"

connectDB.php :

"<?php

// $login = 'administrateur';
// $pass = 'Admin';

// try {
//     $bdd = new PDO('mysql:host=192.168.1.205;dbname=meteoconcept;charset=utf8', $login, $pass);
//     $bdd->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
// } catch (PDOException $e) {
//     die('Erreur : connexion à la base de données impossible ' . $e->getMessage());
// }

$login = 'root';
$pass = '';

try {
    $bdd = new PDO('mysql:host=localhost;dbname=meteoconcept;charset=utf8', $login, $pass);
} catch (Exception $e) {
    die('Erreur : connexion à la base de données impossible ' . $e->getMessage());
}

// $login = 'administrateur';
// $pass = 'Admin';

// try {
//     $bdd = new PDO('mysql:host=192.168.1.205;dbname=meteoconcept;charset=utf8', $login, $pass, array(
//         PDO::MYSQL_ATTR_SSL_KEY    => '/etc/ssl/mariadb/client-key.pem',
//         PDO::MYSQL_ATTR_SSL_CERT   => '/etc/ssl/mariadb/client-cert.pem',
//         PDO::MYSQL_ATTR_SSL_CA     => '/etc/ssl/mariadb/ca-cert.pem',
//         PDO::ATTR_ERRMODE          => PDO::ERRMODE_EXCEPTION
//     ));
// } catch (PDOException $e) {
//     die('Erreur : connexion à la base de données impossible ' . $e->getMessage());
// }
?>"

connectLog.php :

"<?php
// $login = 'log';
// $pass = 'Log';

// try {
//     $bdd = new PDO('mysql:host=192.168.1.205;dbname=meteoconcept;charset=utf8', $login, $pass);
//     $bdd->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
// } catch (PDOException $e) {
//     die('Erreur : connexion à la base de données impossible ' . $e->getMessage());
// }

$login = 'root';
$pass = '';

 try {
    $bdd = new PDO('mysql:host=localhost;dbname=meteoconcept;charset=utf8', $login, $pass);
    $bdd->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die('Erreur : connexion à la base de données impossible ' . $e->getMessage());
}
?>"

Consultation.php :

"<?php
session_start(); // Démarre la session PHP
require "connectDB.php"; // Inclusion de la connexion à la base de données

if (!isset($_SESSION['login']) || $_SESSION['fonction'] !== 'Administrateur') {
    header('Location: Log.php'); // Redirection si l'utilisateur n'est pas connecté ou non admin
    exit();
}

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['Deconnexion'])) {
    session_destroy(); // Destruction de la session si demande de déconnexion
    header('Location: Log.php'); // Redirection vers la page de login
    exit;
}

try {
    $req = $bdd->prepare("SELECT Prenom, Nom FROM utilisateur WHERE Login = :username"); // Préparation de la requête utilisateur
    $req->execute([':username' => $_SESSION['login']]); // Exécution avec paramètre de session
    $user = $req->fetch(PDO::FETCH_ASSOC); // Récupération des données utilisateur

    if ($user) {
        $prenom = $user['Prenom']; // Assignation du prénom
        $nom = $user['Nom']; // Assignation du nom
    } else {
        error_log("Utilisateur non trouvé : " . $_SESSION['login']); // Log si utilisateur introuvable
    }
} catch (PDOException $e) {
    die("Erreur lors de la récupération des informations utilisateur : " . $e->getMessage()); // Gestion d'erreur
}
?>

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8"> <!-- Encodage UTF-8 -->
    <title>Consultation des Mesures</title> 
    <link href="../css/Consultation.css" rel="stylesheet" type="text/css"> <!-- Feuille de style -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> <!-- Librairie Chart.js -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- jQuery -->
    <script>
        const utilisateurNomComplet = "<?php echo addslashes($prenom . ' ' . $nom); ?>"; // Variable JS avec le nom complet
    </script>
</head>
<body>
    <header class="navBar"> <!-- Barre de navigation -->
        <div id="navAutre">
            <a href="Parametrage.php">
                <img src="../img/reglage.svg" alt="plus non trouvé" id="reglage" title="Parametrage du système"> <!-- Lien vers la page de paramétrage -->
            </a>
        </div>
        <div id="navTitre">
            Consultation des mesures <!-- Titre principal -->
        </div>
        <div id="navDeconnexion">
            <?php echo $prenom . ' ' . $nom . ' | '; ?> <!-- Affichage du nom -->
            <a href="Log.php">Déconnexion</a> <!-- Lien de déconnexion -->
            <img id="modeIcon" src="../img/lune.svg" alt="Mode clair" title="Mode sombre"> <!-- Icône mode sombre -->
        </div>
    </header>

    <div id="divSelect"> <!-- Bloc principal de sélection -->
        <div id="actionGraphique">
            <div id="graphique">
                <h2>Graphique n°1</h2> <!-- Titre du graphique principal -->
            </div>
            <div id="actions">
                <img src="../img/plus.svg" alt="plus non trouvé" id="ajoutCourbe" title="Ajouter un graphique"> <!-- Ajout de courbe -->
                <img src="../img/moins.svg" alt="moins non trouvé" id="supprimerCourbe" title="Supprimer un graphique"> <!-- Suppression de courbe -->
            </div>
        </div>
        <div id="selectGraphique">
            <div id="selectSerre">
                <h3>Selection serre :</h3>
                <select name="lstSerre" id="lstSerre" data-url="getChapelles.php"> <!-- Liste des serres -->
                    <option value="" selected>-- Sélectionner une serre --</option>
                    <?php include 'getSerres.php'; ?> <!-- Remplissage dynamique -->
                </select>
            </div>

            <div id="selectChapelle">
                <h3>Selection chapelle :</h3>
                <select name="lstChapelle" id="lstChapelle" data-url="getCartes.php" disabled> <!-- Liste chapelles dépendante -->
                    <option value="">-- Sélectionner une chapelle --</option>
                </select>
            </div>

            <div id="selectCarte">
                <h3>Selection carte :</h3>
                <select name="lstCarte" id="lstCarte" data-url="getCapteurs.php" disabled> <!-- Liste cartes dépendante -->
                    <option value="">-- Sélectionner une carte --</option>
                </select>
            </div>

            <div id="selectCapteur">
                <h3>Selection capteur :</h3>
                <select name="lstCapteur" id="lstCapteur" disabled> <!-- Liste capteurs dépendante -->
                    <option value="">-- Sélectionner un capteur --</option>
                </select>
            </div>
        </div>

        <div id="selectPlage">
            <button onclick="ouvertureModel()">Plage temporelle</button> <!-- Bouton pour ouvrir la plage de temps -->
        </div>

        <div id="infoGraphique">
        </div>
    </div> 

    <div id="divGraphiques">
        <div id="Graphique" class="graphiqueBloc"> <!-- Bloc graphique principal -->
            <img src="../img/download.svg" alt="Export" id="telechargeCourbe" title="Export CSV"> <!-- Export CSV -->
            <canvas id="monGraphique"></canvas> <!-- Canvas pour Chart.js -->
        </div>
    </div>

    <div id="model"> <!-- Modale pour la plage temporelle principale -->
        <span class="close" id="closePlageMain">&times;</span>
        <label for="startDate">Date de début :</label>
        <input type="date" id="startDate">
        <label for="startTime">Heure de début :</label>
        <input type="time" id="startTime" required>
        <br><br>
        <label for="endDate">Date de fin :</label>
        <input type="date" id="endDate">
        <label for="endTime">Heure de fin :</label>
        <input type="time" id="endTime" required>
        <br><br>
        <button onclick="updateChartWithTimeRange()">Valider</button> <!-- Bouton de validation -->
    </div>

    <div id="ajoutCourbeDiv" class="model" style="display: none;"> <!-- Modale ajout courbe -->
        <span class="close" id="closeAjoutCourbe">&times;</span>
        <div id="selectSerre">
            <h3>Selection serre :</h3>
            <select name="lstSerreAjout" id="lstSerreAjout" data-url="getChapelles.php">
                <option value="" selected>-- Sélectionner une serre --</option>
                <?php include 'getSerres.php'; ?>
            </select>
        </div>

        <div id="selectChapelle">
            <h3>Selection chapelle :</h3>
            <select name="lstChapelleAjout" id="lstChapelleAjout" data-url="getCartes.php" disabled>
                <option value="">-- Sélectionner une chapelle --</option>
            </select>
        </div>

        <div id="selectCarte">
            <h3>Selection carte :</h3>
            <select name="lstCarteAjout" id="lstCarteAjout" data-url="getCapteurs.php" disabled>
                <option value="">-- Sélectionner une carte --</option>
            </select>
        </div>

        <div id="selectCapteur">
            <h3>Selection capteur :</h3>
            <select name="lstCapteurAjout" id="lstCapteurAjout" disabled>
                <option value="">-- Sélectionner un capteur --</option>
            </select>
        </div>

        <div id="plageTemporelleAjout">
            <label>
                <input type="checkbox" id="synchroPlageAjout" checked>
                Utiliser la même plage que la courbe principale <!-- Synchronisation des plages -->
            </label>
        </div>
        <div id="selectPlage">
            <div class="lignePlage">
                <label for="startDateAjout">Date début :</label>
                <input type="date" id="startDateAjout" disabled>
            </div>
            <div class="lignePlage">
                <label for="startTimeAjout">Heure début :</label>
                <input type="time" id="startTimeAjout" required disabled>
            </div>
            <div class="lignePlage">
                <label for="endDateAjout">Date fin :</label>
                <input type="date" id="endDateAjout" disabled>
            </div>
            <div class="lignePlage">
                <label for="endTimeAjout">Heure fin :</label>
                <input type="time" id="endTimeAjout" required disabled>
            </div>
        </div>
        <button id="validerAjoutCourbe">Valider</button> <!-- Bouton ajout courbe -->
    </div>

    <div id="suppressionCourbeDiv" class="model" style="display: none;"> <!-- Modale suppression courbe -->
        <span class="close" id="closeSuppressionCourbe">&times;</span>
        <h3>Supprimer un graphique</h3>
        <select id="listeGraphiquesASupprimer">
            <option value="">-- Sélectionner un graphique --</option> <!-- Liste déroulante des courbes -->
        </select>
        <br><br>
        <div style="display: flex; justify-content: center; gap: 10px;">
            <button id="confirmerSuppressionGraphique">Supprimer</button> <!-- Confirmation suppression -->
            <button id="annulerSuppressionGraphique">Annuler</button> <!-- Annulation suppression -->
        </div>
    </div>

    <script src="../js/Fonctions.js"></script> <!-- Fonctions JS -->
    <script src="../js/Consultation.js"></script> <!-- Script principal -->
</body>
</html>"

deleteCapteur.php :

"<?php
// Inclusion du fichier de connexion à la base de données
require_once 'connectDB.php'; 

// Vérifie si l'ID du capteur est bien reçu en POST
if (isset($_POST['id'])) {
    $id = $_POST['id'];

    // Vérifie que l'ID est bien un nombre
    if (is_numeric($id)) {

        // Requête de suppression (attention au nom de la table : 'capteurs' ou 'capteur' ?)
        $query = "DELETE FROM capteur WHERE IdCapteur = :id";

        try {
            // Prépare la requête avec la connexion à la base
            $stmt = $bdd->prepare($query);
            $stmt->bindParam(':id', $id, PDO::PARAM_INT); // Lie l'ID en paramètre
            $stmt->execute(); // Exécute la requête

            // Vérifie si une ligne a bien été supprimée
            if ($stmt->rowCount() > 0) {
                echo json_encode(['success' => true]); // Succès
            } else {
                echo json_encode(['success' => false, 'error' => 'Aucun capteur trouvé avec cet ID']);
            }
        } catch (PDOException $e) {
            // Gère les erreurs SQL
            echo json_encode(['success' => false, 'error' => $e->getMessage()]);
        }

    } else {
        // Si l'ID n'est pas un nombre
        echo json_encode(['success' => false, 'error' => 'ID invalide']);
    }

} else {
    // Si l'ID n'est pas fourni
    echo json_encode(['success' => false, 'error' => 'Données manquantes']);
}"

deleteRow.php :

"<?php
// Inclusion du fichier de connexion à la base de données
require_once 'connectDB.php'; 

// Vérifie que les données nécessaires sont bien envoyées via POST
if (isset($_POST['id']) && isset($_POST['table'])) {
    $id = $_POST['id'];                 // Récupère l'ID de l'élément à supprimer
    $table = $_POST['table'];           // Récupère le nom de la table concernée

    // Vérifie que l'ID est bien numérique
    if (is_numeric($id)) {

        // Détermine la requête SQL selon la table
        if ($table === 'serre') {
            $query = "DELETE FROM serre WHERE IdSerre = :id";
        } elseif ($table === 'carte') {
            $query = "DELETE FROM carte WHERE DevEui = :id";
        } else {
            // Si la table demandée n'est pas prise en charge
            echo json_encode(['success' => false, 'error' => 'Table non supportée']);
            exit;
        }

        try {
            // Prépare et exécute la requête
            $stmt = $bdd->prepare($query);                       // Prépare la requête
            $stmt->bindParam(':id', $id);                        // Lie l'ID (pas besoin de PDO::PARAM_INT si DevEui est une chaîne)
            $stmt->execute();                                    // Exécute la requête

            // Vérifie si une ligne a été supprimée
            if ($stmt->rowCount() > 0) {
                echo json_encode(['success' => true]);           // Suppression réussie
            } else {
                echo json_encode(['success' => false, 'error' => 'Aucun élément trouvé avec cet ID']);
            }

        } catch (PDOException $e) {
            // Gestion d'erreur SQL
            echo json_encode(['success' => false, 'error' => $e->getMessage()]);
        }

    } else {
        echo json_encode(['success' => false, 'error' => 'ID invalide']); // L’ID n’est pas numérique
    }

} else {
    echo json_encode(['success' => false, 'error' => 'Données manquantes']); // POST incomplet
}
?>"

directionVent.php :

"<?php
//Fonction pour afficher la direction du vent
function directionVent($angle) {
    switch (true) {
        case ($angle >= 348 || $angle < 12.25):
            return "NORD";
        case ($angle >= 12.25 && $angle < 34.75):
            return "NORD-NORD-EST";
        case ($angle >= 34.75 && $angle < 57.25):
            return "NORD-EST";
        case ($angle >= 57.25 && $angle < 79.75):
            return "EST-NORD-EST";
        case ($angle >= 79.75 && $angle < 102.25):
            return "EST";
        case ($angle >= 102.25 && $angle < 124.75):
            return "EST-SUD-EST";
        case ($angle >= 124.75 && $angle < 147.25):
            return "SUD-EST";
        case ($angle >= 147.25 && $angle < 169.75):
            return "SUD-SUD-EST";
        case ($angle >= 169.75 && $angle < 192.25):
            return "SUD";
        case ($angle >= 192.25 && $angle < 214.75):
            return "SUD-SUD-OUEST";
        case ($angle >= 214.75 && $angle < 237.25):
            return "SUD-OUEST";
        case ($angle >= 237.25 && $angle < 259.75):
            return "OUEST-SUD-OUEST";
        case ($angle >= 259.75 && $angle < 282.25):
            return "OUEST";
        case ($angle >= 282.25 && $angle < 304.75):
            return "OUEST-NORD-OUEST";
        case ($angle >= 304.75 && $angle < 327.25):
            return "NORD-OUEST";
        default:
            return "NORD-NORD-OUEST";
    }
}
?>"

getCapteurId.php :

"<?php
require "connectDB.php"; // Connexion à la base de données

// Vérifie que le paramètre 'grandeur' est bien passé en GET
if (isset($_GET['grandeur'])) {
    $grandeur = $_GET['grandeur'];

    try {
        // Prépare et exécute une requête pour récupérer un capteur associé à la grandeur
        $stmt = $bdd->prepare("SELECT IdCapteur FROM capteur WHERE GrandeurCapt = ? LIMIT 1");
        $stmt->execute([$grandeur]);

        // Récupère le premier résultat sous forme de tableau associatif
        $capteurInfo = $stmt->fetch(PDO::FETCH_ASSOC);

        // Renvoie les données au format JSON (ou null si aucun résultat)
        echo json_encode($capteurInfo);

    } catch (PDOException $e) {
        // En cas d’erreur SQL, renvoyer un message d’erreur au format JSON
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>"

getCapteurInfo.php :

"<?php
require "connectDB.php"; // Inclusion du fichier de connexion à la base de données

// Vérifie que l'ID du capteur est fourni via GET
if (isset($_GET['capteur_id'])) {
    $capteurId = $_GET['capteur_id'];

    try {
        // Prépare une requête pour récupérer la grandeur et l'unité associées à ce capteur
        $stmt = $bdd->prepare("
            SELECT g.GrandeurCapt, g.Unite
            FROM grandeur g
            WHERE g.GrandeurCapt = (
                SELECT c.GrandeurCapt
                FROM capteur c
                WHERE c.IdCapteur = ?
            )
        ");
        
        // Exécute la requête avec l'ID du capteur passé en paramètre
        $stmt->execute([$capteurId]);

        // Récupère le résultat sous forme de tableau associatif
        $capteurInfo = $stmt->fetch(PDO::FETCH_ASSOC);

        // Renvoie les données au format JSON
        echo json_encode($capteurInfo);

    } catch (PDOException $e) {
        // En cas d’erreur SQL, renvoie un message d’erreur JSON
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>"

getCapteurs.php :

"<?php
require "connectDB.php"; // Connexion à la base de données

// Vérifie que l'identifiant de la carte est bien passé en paramètre GET
if (isset($_GET['carte_id'])) {
    $carteId = $_GET['carte_id'];

    try {
        // Prépare une requête pour récupérer les capteurs associés à la carte via la table 'possede'
        $stmt = $bdd->prepare("
            SELECT ca.IdCapteur, ca.Nom
            FROM capteur ca
            JOIN possede po ON ca.IdCapteur = po.IdCapteur
            WHERE po.DevEui = ?
        ");

        // Exécute la requête avec l'ID de la carte fourni
        $stmt->execute([$carteId]);

        // Récupère tous les capteurs associés sous forme de tableau associatif
        $capteurs = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Renvoie les résultats encodés en JSON
        echo json_encode($capteurs);

    } catch (PDOException $e) {
        // En cas d'erreur SQL, renvoie l'erreur encodée en JSON
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>"

getCartes.php :

"<?php
require "connectDB.php"; // Inclusion de la connexion à la base de données

// Vérifie que l'identifiant de la chapelle est bien passé en paramètre GET
if (isset($_GET['chapelle_id'])) {
    $chapelleId = $_GET['chapelle_id'];

    try {
        // Prépare une requête pour récupérer les cartes associées à cette chapelle
        $stmt = $bdd->prepare("SELECT DevEui, Nom FROM carte WHERE IdChapelle = ?");
        $stmt->execute([$chapelleId]); // Exécution avec l'ID de chapelle fourni

        // Récupère les cartes sous forme de tableau associatif
        $cartes = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Envoie les résultats au format JSON
        echo json_encode($cartes);

    } catch (PDOException $e) {
        // En cas d'erreur, retourne un message d'erreur au format JSON
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>"

getChapelles.php :

"<?php
require "connectDB.php"; // Inclusion du fichier de connexion à la base de données

// Vérifie si l'ID de la serre a bien été envoyé via GET
if (isset($_GET['serre_id'])) {
    $serreId = $_GET['serre_id']; // Récupération de l'ID

    try {
        // Prépare la requête pour récupérer les chapelles liées à la serre
        $stmt = $bdd->prepare("SELECT IdChapelle, Nom FROM chapelle WHERE IdSerre = ?");
        $stmt->execute([$serreId]); // Exécution avec l'ID de serre

        // Récupère les résultats sous forme de tableau associatif
        $chapelles = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Envoie les résultats au format JSON
        echo json_encode($chapelles);

    } catch (PDOException $e) {
        // En cas d'erreur SQL, renvoie un message JSON avec l'erreur
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>"

getDerniereMesure.php :

"<?php
require "connectDB.php"; // Inclusion de la connexion à la base de données

// Vérifie que l'ID du capteur est bien présent dans la requête GET
if (!isset($_GET['capteur_id'])) {
    echo json_encode(["error" => "ID capteur manquant"]); // Renvoie une erreur si l'ID est absent
    exit; // Interrompt l'exécution du script
}

$capteurId = $_GET['capteur_id']; // Récupère l'ID du capteur depuis l'URL

try {
    // Prépare une requête pour récupérer la dernière mesure du capteur
    $stmt = $bdd->prepare(
        "SELECT Valeur, Horodatage 
         FROM mesure 
         WHERE IdCapteur = :capteurId 
         ORDER BY Horodatage DESC 
         LIMIT 1"
    );

    // Exécute la requête avec l'ID du capteur
    $stmt->execute([':capteurId' => $capteurId]);

    // Récupère le résultat sous forme associative
    $result = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($result) {
        echo json_encode($result); // Renvoie la dernière mesure trouvée
    } else {
        echo json_encode(["error" => "Aucune mesure trouvée"]); // Aucun enregistrement trouvé
    }

} catch (PDOException $e) {
    // En cas d'erreur lors de la requête SQL, renvoie le message d'erreur
    echo json_encode(["error" => $e->getMessage()]);
}
?>"

getDirectionVent.php :

"<?php
// Inclusion de la fonction de calcul de direction du vent depuis un autre fichier
require_once "directionVent.php";

// Vérifie si le paramètre 'angle' est présent dans la requête GET
if (isset($_GET['angle'])) {
    // Convertit le paramètre 'angle' en nombre décimal (float)
    $angle = floatval($_GET['angle']);

    // Renvoie la direction du vent au format JSON en appelant la fonction directionVent()
    echo json_encode(['direction' => directionVent($angle)]);
} else {
    // Si aucun angle n'est fourni, retourne un message d'erreur
    echo json_encode(['error' => 'Paramètre angle manquant']);
}
?>"

getMesures.php :

"<?php
// Connexion à la base de données
require "connectDB.php";

// Vérifie que l'identifiant du capteur est fourni en paramètre GET
if (isset($_GET['capteur_id'])) {
    $capteurId = $_GET['capteur_id'];

    // Récupère les bornes temporelles si elles existent
    $startDate = $_GET['startDate'] ?? null;
    $startTime = $_GET['startTime'] ?? null;
    $endDate   = $_GET['endDate'] ?? null;
    $endTime   = $_GET['endTime'] ?? null;

    try {
        // 1. Construction de la requête SQL de récupération des mesures
        $sql = "SELECT Horodatage, Valeur FROM mesure WHERE IdCapteur = ?";
        $params = [$capteurId];

        // Ajout d'une condition de plage temporelle si tous les champs sont fournis
        if ($startDate && $startTime && $endDate && $endTime) {
            $startDateTime = $startDate . ' ' . $startTime;
            $endDateTime   = $endDate . ' ' . $endTime;
            $sql .= " AND Horodatage BETWEEN ? AND ?";
            $params[] = $startDateTime;
            $params[] = $endDateTime;
        }

        $sql .= " ORDER BY Horodatage ASC"; // Trie les mesures par date croissante

        $stmt = $bdd->prepare($sql);
        $stmt->execute($params);
        $mesures = $stmt->fetchAll(PDO::FETCH_ASSOC); // Résultat des mesures

        // 2. Récupère la dernière mesure pour évaluer l’état du capteur
        $stmtLast = $bdd->prepare("SELECT Horodatage FROM mesure WHERE IdCapteur = ? ORDER BY Horodatage DESC LIMIT 1");
        $stmtLast->execute([$capteurId]);
        $last = $stmtLast->fetch(PDO::FETCH_ASSOC);

        $etat = "OK"; // État par défaut

        if ($last && !empty($last['Horodatage'])) {
            $lastDate = new DateTime($last['Horodatage']);
            $now = new DateTime();
            $diff = $now->getTimestamp() - $lastDate->getTimestamp();

            // Si la dernière mesure date de plus de 30 minutes, l'état est HS
            if ($diff > 1800) {
                $etat = "HS";
            }
        } else {
            $etat = "HS"; // Aucun relevé du tout
        }

        // 3. Vérifie si l'état doit être mis à jour dans la base
        $stmtCheck = $bdd->prepare("SELECT EtatComposant FROM capteur WHERE IdCapteur = ?");
        $stmtCheck->execute([$capteurId]);
        $etatActuel = $stmtCheck->fetchColumn();

        if ($etatActuel !== $etat) {
            $stmtUpdate = $bdd->prepare("UPDATE capteur SET EtatComposant = ? WHERE IdCapteur = ?");
            $stmtUpdate->execute([$etat, $capteurId]);
        }

        // 4. Retourne les mesures et l’état du capteur au format JSON
        echo json_encode([
            'etat' => $etat,
            'mesures' => $mesures
        ]);

    } catch (PDOException $e) {
        // En cas d'erreur SQL, renvoie un message d'erreur au format JSON
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>"

getSelectOptions.php :

"<?php
// Connexion à la base de données
require "connectDB.php";

try {
    $options = []; // Tableau pour stocker toutes les options

    // Récupère tous les états possibles depuis les tables carte et capteur (en supprimant les doublons avec UNION)
    $stmt = $bdd->query("
        SELECT DISTINCT EtatComposant FROM carte
        UNION
        SELECT DISTINCT EtatComposant FROM capteur
    ");
    $options['EtatComposant'] = $stmt->fetchAll(PDO::FETCH_COLUMN); // Stocke les états dans le tableau

    // Récupère toutes les grandeurs de capteurs disponibles
    $stmt = $bdd->query("SELECT DISTINCT GrandeurCapt FROM capteur");
    $options['GrandeurCapt'] = $stmt->fetchAll(PDO::FETCH_COLUMN); // Stocke les grandeurs dans le tableau

    // Récupère toutes les unités de capteurs non nulles
    $stmt = $bdd->query("SELECT DISTINCT Unite FROM capteur WHERE Unite IS NOT NULL");
    $options['Unite'] = $stmt->fetchAll(PDO::FETCH_COLUMN); // Stocke les unités dans le tableau

    // Récupère toutes les cartes (DevEui et Nom)
    $stmt = $bdd->query("SELECT DevEui, Nom FROM carte");
    $options['Cartes'] = $stmt->fetchAll(PDO::FETCH_ASSOC); // Stocke les cartes dans le tableau

    // Retourne toutes les options au format JSON
    echo json_encode($options);

} catch (PDOException $e) {
    // En cas d'erreur SQL, retourne le message d'erreur en JSON
    echo json_encode(['error' => $e->getMessage()]);
}
?>"

getSerres.php :

"<?php
// Inclusion du fichier de connexion à la base de données
require "connectDB.php";

try {
    // Requête pour récupérer tous les IdSerre et Nom depuis la table serre
    $stmtSerre = $bdd->query("SELECT IdSerre, Nom FROM serre");

    // Récupération des résultats sous forme de tableau associatif
    $serres = $stmtSerre->fetchAll(PDO::FETCH_ASSOC);

    // Boucle sur chaque serre pour générer une <option> HTML
    foreach ($serres as $serre) {
        echo "<option value='" . $serre["IdSerre"] . "'>" . $serre["Nom"] . "</option>";
    }

} catch (PDOException $e) {
    // En cas d’erreur, log l’erreur dans les logs PHP (utile pour le debug sans affichage à l’utilisateur)
    error_log("Erreur lors de la récupération des serres : " . $e->getMessage());

    // Ne rien afficher sur la page en production pour éviter les fuites d'information sensibles
}
?>"

getTableData.php :

"<?php
// Connexion à la base de données
require "connectDB.php";

// Vérifie que le nom de la table est passé en paramètre GET
if (isset($_GET['table'])) {
    $tableName = $_GET['table'];

    try {
        // Initialisation des variables
        $columns = [];
        $rows = [];
        $idField = null;

        // Sélection des données selon la table demandée
        switch ($tableName) {
            case 'carte':
                // Jointure avec la chapelle pour afficher son nom
                $stmt = $bdd->prepare("
                    SELECT carte.DevEui, carte.Nom AS NomCarte, carte.DateMiseEnService, carte.AppKey, carte.AppEUI, carte.Marque, 
                           carte.Reference, carte.NumSerie, carte.Commentaire, chapelle.Nom AS NomChapelle, carte.EtatComposant
                    FROM carte
                    LEFT JOIN chapelle ON carte.IdChapelle = chapelle.IdChapelle
                ");
                $stmt->execute();
                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
                $idField = 'DevEui'; // Champ identifiant
                break;

            case 'capteur':
                $stmt = $bdd->prepare("SELECT * FROM capteur");
                $stmt->execute();
                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
                $idField = 'IdCapteur';
                break;

            case 'chapelle':
                $stmt = $bdd->prepare("SELECT * FROM chapelle");
                $stmt->execute();
                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
                $idField = 'IdChapelle';
                break;

            case 'serre':
                $stmt = $bdd->prepare("SELECT * FROM serre");
                $stmt->execute();
                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
                $idField = 'IdSerre';
                break;

            case 'utilisateur':
                $stmt = $bdd->prepare("SELECT * FROM utilisateur");
                $stmt->execute();
                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
                $idField = 'IdUtilisateur';
                break;

            default:
                // Cas par défaut si la table est non reconnue
                $stmt = $bdd->prepare("SELECT * FROM " . $tableName);
                $stmt->execute();
                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
                $idField = null;
        }

        // Récupère les noms de colonnes si des données existent
        if (!empty($rows)) {
            $columns = array_keys($rows[0]);
        }

        // Ajoute un bouton d'action "Modifier" si la table est capteur ou carte
        if (in_array($tableName, ['capteur', 'carte']) && $idField !== null) {
            foreach ($rows as &$row) {
                $row['Actions'] = '<button class="modifyImage" data-id="' . $row[$idField] . '">Modifier</button>';
            }
        }

        // Construction finale de la liste de colonnes à retourner
        $finalColumns = [];

        // Place "Actions" en premier si elle existe
        if (isset($rows[0]['Actions'])) {
            $finalColumns[] = 'Actions';
        }

        // Ajoute toutes les autres colonnes sauf la clé primaire et IdChapelle
        foreach ($columns as $col) {
            if ($col !== $idField && $col !== 'IdChapelle') {
                $finalColumns[] = $col;
            }
        }

        // Réponse au format JSON : colonnes + lignes
        echo json_encode(['columns' => $finalColumns, 'rows' => $rows]);

    } catch (PDOException $e) {
        // En cas d'erreur SQL, retour d'un message JSON avec le détail
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>"

getUnitesParGrandeur.php :

"<?php
// Inclusion du fichier de connexion à la base de données
require 'connectDB.php';

// Vérifie que le paramètre 'grandeur' est bien présent dans l'URL
if (isset($_GET['grandeur'])) {
    $grandeur = $_GET['grandeur']; // Récupère la grandeur depuis la requête GET

    // Prépare une requête pour récupérer toutes les unités correspondant à cette grandeur
    $stmt = $bdd->prepare("SELECT Unite FROM grandeur WHERE GrandeurCapt = :grandeur");

    // Exécute la requête avec le paramètre fourni
    $stmt->execute([':grandeur' => $grandeur]);

    // Récupère toutes les unités trouvées (sous forme de tableau de chaînes)
    $unites = $stmt->fetchAll(PDO::FETCH_COLUMN);

    // Renvoie le résultat au format JSON
    echo json_encode($unites);
} else {
    // Si le paramètre 'grandeur' est manquant, renvoie un tableau vide
    echo json_encode([]);
}
?>"

insertData.php :

"<?php
// Inclusion du fichier de connexion à la base de données
require "connectDB.php";

// Vérifie que la méthode HTTP utilisée est POST
if ($_SERVER['REQUEST_METHOD'] === 'POST') {

    $table = $_POST['table']; // Récupère le nom de la table cible (capteur ou carte)

    try {
        // --- Cas d'ajout d’un capteur ---
        if ($table === 'capteur') {
            // Liste des champs obligatoires pour un capteur
            $requiredFields = ['NomCapteur', 'GrandeurCapt', 'Unite', 'ValeurMin', 'ValeurMax', 'EtatComposant', 'DevEui'];

            // Vérifie que chaque champ est bien présent dans $_POST
            foreach ($requiredFields as $field) {
                if (!isset($_POST[$field])) {
                    echo json_encode(['success' => false, 'error' => "Le champ '$field' est manquant !"]);
                    exit;
                }
            }

            // Vérifie si la carte sélectionnée possède déjà un capteur (1 capteur max par carte)
            $verifCapteurCarte = $bdd->prepare("
                SELECT COUNT(*) FROM capteur WHERE DevEui = :DevEui
            ");
            $verifCapteurCarte->execute([':DevEui' => $_POST['DevEui']]);
            $nbCapteurs = $verifCapteurCarte->fetchColumn();

            if ($nbCapteurs > 0) {
                echo json_encode(['success' => false, 'error' => "Impossible d'ajouter un capteur : la carte sélectionnée possède déjà un capteur."]);
                exit;
            }

            // Insertion du nouveau capteur
            $stmt = $bdd->prepare("
                INSERT INTO capteur 
                    (Nom, GrandeurCapt, Unite, ValeurMin, ValeurMax, EtatComposant, DateMiseEnService, DevEui)
                VALUES 
                    (:NomCapteur, :GrandeurCapt, :Unite, :ValeurMin, :ValeurMax, :EtatComposant, NOW(), :DevEui)
            ");

            $stmt->execute([
                ':NomCapteur'    => $_POST['NomCapteur'],
                ':GrandeurCapt'  => $_POST['GrandeurCapt'],
                ':Unite'         => $_POST['Unite'],
                ':ValeurMin'     => $_POST['ValeurMin'],
                ':ValeurMax'     => $_POST['ValeurMax'],
                ':EtatComposant' => $_POST['EtatComposant'],
                ':DevEui'        => $_POST['DevEui']
            ]);

        // --- Cas d'ajout d’une carte ---
        } elseif ($table === 'carte') {
            // Champs obligatoires pour une carte
            $requiredFields = ['NomCarte', 'EtatComposant'];

            foreach ($requiredFields as $field) {
                if (!isset($_POST[$field])) {
                    echo json_encode(['success' => false, 'error' => "Le champ '$field' est manquant !"]);
                    exit;
                }
            }

            // Insertion de la nouvelle carte
            $stmt = $bdd->prepare("
                INSERT INTO carte 
                    (Nom, EtatComposant, DateMiseEnService)
                VALUES 
                    (:NomCarte, :EtatComposant, NOW())
            ");

            $stmt->execute([
                ':NomCarte'      => $_POST['NomCarte'],
                ':EtatComposant' => $_POST['EtatComposant']
            ]);

        // --- Table non reconnue ---
        } else {
            echo json_encode(['success' => false, 'error' => "Table non supportée"]);
            exit;
        }

        // Réponse JSON en cas de succès
        echo json_encode(['success' => true]);

    } catch (PDOException $e) {
        // Gestion des erreurs SQL
        echo json_encode(['success' => false, 'error' => $e->getMessage()]);
    }

} else {
    // Requête non autorisée si autre que POST
    echo json_encode(['success' => false, 'error' => "Requête invalide"]);
}
?>"

insertRow.php :

"<?php
// Connexion à la base de données
require "connectDB.php";

// Initialisation de la réponse par défaut
$response = ['success' => false];

// Vérifie que la requête est bien de type POST et que le nom de la table est fourni
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['table'])) {
    $table = $_POST['table'];

    try {
        // Récupère les colonnes de la table via la commande SQL DESCRIBE
        $stmt = $bdd->prepare("DESCRIBE " . $table);
        $stmt->execute();
        $columns = $stmt->fetchAll(PDO::FETCH_COLUMN);

        // Filtre les colonnes pour exclure celles non modifiables (ex : ID auto-incrémenté, date de mise en service)
        $columns = array_filter($columns, function($col) {
            return !in_array($col, ['IdCapteur', 'DateMiseEnService']);
        });

        $insertCols = []; // Liste des colonnes à insérer
        $insertVals = []; // Liste des placeholders :col
        $params = [];     // Paramètres à lier à la requête

        // Construction dynamique des colonnes et des valeurs à insérer
        foreach ($columns as $col) {
            if (isset($_POST[$col])) {
                $insertCols[] = $col;
                $insertVals[] = ':' . $col;
                $params[':' . $col] = $_POST[$col];
            }
        }

        // Ajoute la colonne DateMiseEnService avec la valeur NOW()
        $insertCols[] = 'DateMiseEnService';
        $insertVals[] = 'NOW()';

        // Construit et exécute la requête SQL d'insertion
        $sql = "INSERT INTO $table (" . implode(',', $insertCols) . ") VALUES (" . implode(',', $insertVals) . ")";
        $stmt = $bdd->prepare($sql);
        $stmt->execute($params);

        // Réponse de succès
        $response['success'] = true;

    } catch (PDOException $e) {
        // Capture et retourne l'erreur SQL
        $response['error'] = $e->getMessage();
    }

} else {
    // Si la requête est invalide
    $response['error'] = 'Requête invalide';
}

// Renvoie la réponse au format JSON
echo json_encode($response);
?>"

Log.php :

"<?php
session_start(); // Démarre la session pour stocker les informations de l'utilisateur
require "connectLog.php"; // Connexion à la base de données

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $Nom = trim($_POST["Nom"]); // Supprime les espaces autour du login
    $Mdp = $_POST["Mdp"];        // Ne pas trim le mot de passe (il peut contenir des espaces)

    // Requête préparée pour éviter les injections SQL
    $req = $bdd->prepare("SELECT Mdp, Fonction FROM utilisateur WHERE Login = :nom");
    $req->bindParam(':nom', $Nom, PDO::PARAM_STR);
    $req->execute();
    $reponse = $req->fetch(); // Récupère la ligne correspondante (ou false si non trouvée)

    if ($reponse) {
        // Vérifie si le mot de passe saisi correspond au mot de passe haché en base
        if (password_verify($Mdp, $reponse['Mdp'])) {
            $_SESSION['login'] = $Nom;                    // Enregistre le login en session
            $_SESSION['fonction'] = $reponse['Fonction']; // Enregistre la fonction (ex: admin)
            header('Location: Consultation.php');         // Redirige vers la page de consultation
            exit();
        } else {
            $message = "Mot de passe invalide !"; // Message d'erreur en cas de mauvais mot de passe
        }
    } else {
        $message = "Nom d'utilisateur non trouvé !"; // Message d'erreur si l'utilisateur n'existe pas
    }
}
?>

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Connexion</title>
    <link href="../css/Log.css" rel="stylesheet" type="text/css"> <!-- Feuille de style -->
</head>
<body>
    <!-- Nuages en fond (décoratif) -->
    <div class="cloud" style="top: 20%; left: 10%;"></div>
    <div class="cloud" style="top: 40%; right: 15%; animation-delay: 0s;"></div>
    <div class="cloud" style="top: 60%; left: 20%; animation-delay: 0s;"></div>

    <!-- Boîte de connexion -->
    <div class="container">
        <h2>Se connecter</h2>
        <form action="" method="POST">
            <input type="text" name="Nom" placeholder="Nom d'utilisateur" required>
            <input type="password" name="Mdp" placeholder="Mot de passe" required>
            </br></br>
            <input type="submit" value="Connexion">
        </form>

        <!-- Affiche le message d'erreur si défini -->
        <?php if (!empty($message)): ?>
            <div class="message"><?php echo htmlspecialchars($message); ?></div>
        <?php endif; ?>
    </div>
</body>
</html>"

Parametrage.php :

"<?php 
session_start(); // Démarre la session PHP
require "connectDB.php"; // Connexion à la base de données

// Vérifie si l'utilisateur est connecté et s'il est administrateur
if (!isset($_SESSION['login']) || $_SESSION['fonction'] !== 'Administrateur') {
    header('Location: Log.php'); // Redirige vers la page de connexion si non autorisé
    exit();
}

// Gère la déconnexion via formulaire
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['Deconnexion'])) {
    session_destroy(); // Détruit la session
    header('Location: Log.php'); // Redirige vers la connexion
    exit;
}

// Fonction pour obtenir les noms de colonnes d'une table
function getColumnNames($bdd, $tableName) {
    $stmt = $bdd->prepare("DESCRIBE " . $tableName); // Prépare la requête DESCRIBE
    $stmt->execute(); // Exécute la requête
    return $stmt->fetchAll(PDO::FETCH_COLUMN); // Retourne les noms de colonnes
}

try {
    $req = $bdd->prepare("SELECT Prenom, Nom FROM utilisateur WHERE Login = :username"); // Requête pour récupérer prénom et nom
    $req->execute([':username' => $_SESSION['login']]); // Paramètre sécurisé
    $user = $req->fetch(PDO::FETCH_ASSOC); // Récupère les données utilisateur

    if ($user) {
        $prenom = $user['Prenom']; // Stocke le prénom
        $nom = $user['Nom']; // Stocke le nom
    } else {
        error_log("Utilisateur non trouvé : " . $_SESSION['login']); // Log si utilisateur introuvable
    }
} catch (PDOException $e) {
    die("Erreur lors de la récupération des informations utilisateur : " . $e->getMessage()); // Gestion erreur BDD
}
?>

<!DOCTYPE html>
<html lang="fr"> <!-- Langue de la page -->
<head>
    <meta charset="UTF-8"> <!-- Encodage -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Responsive -->
    <title>Paramétrage du système</title> <!-- Titre onglet -->
    <link href="../css/Parametrage.css" rel="stylesheet" type="text/css"> <!-- Lien vers le CSS -->
</head>
<body>
    <header class="navBar"> <!-- Barre de navigation -->
        <div id="navAutre"> <!-- Bouton vers consultation -->
            <a href="Consultation.php">
                <img src="../img/graphe.svg" alt="plus non trouvé" id="graphe" title="Consultation des mesures">
            </a>
        </div>
        <div id="navTitre">Paramétrage du système</div> <!-- Titre centré -->
        <div id="navDeconnexion"> <!-- Nom + Déconnexion -->
            <?= htmlspecialchars($prenom . ' ' . $nom) ?> | <a href="Log.php">Déconnexion</a>
        </div>
    </header>

    <div class="container"> <!-- Conteneur principal -->
        <div class="selectionTable"> <!-- Boutons de sélection de table -->
            <button id="selectSerre">Serres</button>
            <button id="selectChapelle">Chapelles</button>
            <button id="selectCarte">Cartes</button>
            <button id="selectCapteur">Capteurs</button>
            <button id="selectUtilisateur">Utilisateurs</button>
        </div>

        <div class="tabParametrage"> <!-- Section tableau -->
            <div class="divTableau"> <!-- Conteneur du tableau -->
                <div id="enteteTab"> <!-- En-tête avec recherche -->
                    <h2>Test</h2> <!-- Titre dynamique remplacé JS -->
                    <div id="recherche">
                        <img src="../img/recherche.svg" alt="recherche non trouvé" id="imgRecherche" title="Recherche">
                        <input type="text" id="searchInput" placeholder="Rechercher..."> <!-- Champ recherche -->
                    </div>
                </div>
                <div id="tab"> <!-- Tableau HTML -->
                    <table>
                        <thead><tr></tr></thead> <!-- En-tête dynamique -->
                        <tbody></tbody> <!-- Données générées en JS -->
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Modale dynamique pour Ajout / Modification -->
    <div id="modalOverlay" class="modal" style="display: none;"> <!-- Fond modale masqué -->
        <form id="modalDynamicForm" class="modal-form"> <!-- Formulaire -->
            <h2 id="modalTitle"></h2> <!-- Titre dynamique -->

            <!-- Champs dynamiques générés par JavaScript -->
            <div id="modalFieldsContainer"></div>

            <div class="modal-buttons"> <!-- Boutons formulaire -->
                <button type="submit" id="modalSubmitBtn">Valider</button>
                <button type="button" id="modalCancelBtn">Annuler</button>
            </div>
        </form>
    </div>

    <script type="module" src="../js/modals.js"></script> <!-- Script modale -->
    <script type="module" src="../js/Parametrage.js"></script> <!-- Script principal -->
</body>
</html>"

updateRow.php :

"<?php
require "connectDB.php"; // Connexion à la base de données

header('Content-Type: application/json'); // Réponse en JSON

$response = ['success' => false]; // Réponse par défaut

// Vérifie que la requête est POST et contient bien les champs nécessaires
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['table']) && isset($_POST['id'])) {
    $table = $_POST['table'];
    $id = $_POST['id'];

    try {
        // Récupère les colonnes de la table
        $stmt = $bdd->prepare("DESCRIBE " . $table);
        $stmt->execute();
        $columns = $stmt->fetchAll(PDO::FETCH_COLUMN);

        // Colonnes à ne pas modifier
        $ignore = ['DateMiseEnService'];
        if ($table === 'capteur') {
            $primaryKey = 'IdCapteur';
            $ignore[] = 'IdCapteur';
        } elseif ($table === 'carte') {
            $primaryKey = 'DevEui';
            $ignore[] = 'DevEui';
        } else {
            echo json_encode(['success' => false, 'error' => 'Table non supportée']);
            exit;
        }

        $setClause = []; // Liste des champs à mettre à jour
        $params = [];    // Paramètres liés

        // Pour chaque colonne, on crée les paires clé/valeur pour l'UPDATE
        foreach ($columns as $col) {
            if (!in_array($col, $ignore) && isset($_POST[$col])) {
                $setClause[] = "$col = :$col";
                $params[":$col"] = $_POST[$col];
            }
        }

        $params[":id"] = $id; // Clé primaire pour le WHERE

        // Construction de la requête SQL finale
        $sql = "UPDATE $table SET " . implode(", ", $setClause) . " WHERE $primaryKey = :id";
        $stmt = $bdd->prepare($sql);
        $stmt->execute($params);

        $response['success'] = true; // Mise à jour réussie

    } catch (PDOException $e) {
        $response['error'] = $e->getMessage(); // Gestion des erreurs SQL
    }
} else {
    $response['error'] = "Requête invalide"; // Mauvais appel
}

echo json_encode($response); // Envoie la réponse JSON
?>"

Consultation.js :

"// Gestionnaire d'événement pour le chargement du DOM
document.addEventListener('DOMContentLoaded', function () {

    // Gestion du changement de sélection de la serre
    document.getElementById('lstSerre').addEventListener('change', function () {
        var serreId = this.value; // Récupère l'ID de la serre sélectionnée
        if (serreId) {
            fetch('getChapelles.php?serre_id=' + serreId) // Appel pour récupérer les chapelles de la serre
                .then(response => response.json()) // Conversion en JSON
                .then(chapelles => {
                    var chapelleSelect = document.getElementById('lstChapelle'); // Sélecteur de chapelle
                    chapelleSelect.innerHTML = '<option value="">-- Sélectionnez une chapelle --</option>'; // Réinitialisation
                    chapelles.forEach(chapelle => {
                        chapelleSelect.innerHTML += '<option value="' + chapelle.IdChapelle + '">' + chapelle.Nom + '</option>'; // Ajoute les options
                    });
                    document.getElementById('lstCarte').innerHTML = '<option value="">-- Sélectionnez une carte --</option>'; // Reset carte
                    document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>'; // Reset capteur
                    document.getElementById('lstChapelle').removeAttribute('disabled'); // Active chapelle
                    document.getElementById('lstCarte').setAttribute('disabled', true); // Désactive carte
                    document.getElementById('lstCapteur').setAttribute('disabled', true); // Désactive capteur
                });
        } else {
            document.getElementById('lstChapelle').innerHTML = '<option value="">-- Sélectionnez une chapelle --</option>'; // Reset chapelle
            document.getElementById('lstCarte').innerHTML = '<option value="">-- Sélectionnez une carte --</option>'; // Reset carte
            document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>'; // Reset capteur
            document.getElementById('lstChapelle').setAttribute('disabled', true); // Désactive chapelle
            document.getElementById('lstCarte').setAttribute('disabled', true); // Désactive carte
            document.getElementById('lstCapteur').setAttribute('disabled', true); // Désactive capteur
        }
    });

    // Changement de chapelle
    document.getElementById('lstChapelle').addEventListener('change', function () {
        var chapelleId = this.value; // Récupère l'ID chapelle
        if (chapelleId) {
            fetch('getCartes.php?chapelle_id=' + chapelleId) // Récupère les cartes
                .then(response => response.json()) // Convertit JSON
                .then(cartes => {
                    var carteSelect = document.getElementById('lstCarte'); // Sélecteur carte
                    carteSelect.innerHTML = '<option value="">-- Sélectionnez une carte --</option>'; // Réinit
                    cartes.forEach(carte => {
                        carteSelect.innerHTML += '<option value="' + carte.DevEui + '">' + carte.Nom + '</option>'; // Ajoute options
                    });
                    document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>'; // Réinit capteurs
                    document.getElementById('lstCarte').removeAttribute('disabled'); // Active carte
                    document.getElementById('lstCapteur').setAttribute('disabled', true); // Désactive capteur
                });
        } else {
            document.getElementById('lstCarte').innerHTML = '<option value="">-- Sélectionnez une carte --</option>'; // Réinit carte
            document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>'; // Réinit capteur
            document.getElementById('lstCarte').setAttribute('disabled', true); // Désactive carte
            document.getElementById('lstCapteur').setAttribute('disabled', true); // Désactive capteur
        }
    });

    // Changement de carte
    document.getElementById('lstCarte').addEventListener('change', function () {
        var carteId = this.value; // Récupère ID carte
        if (carteId) {
            fetch('getCapteurs.php?carte_id=' + carteId) // Appel pour capteurs
                .then(response => response.json()) // JSON
                .then(capteurs => {
                    var capteurSelect = document.getElementById('lstCapteur'); // Sélecteur capteur
                    capteurSelect.innerHTML = '<option value="">Sélectionnez un capteur</option>'; // Réinit
                    capteurs.forEach(capteur => {
                        capteurSelect.innerHTML += '<option value="' + capteur.IdCapteur + '">' + capteur.Nom + '</option>'; // Ajoute options
                    });
                    document.getElementById('lstCapteur').removeAttribute('disabled'); // Active capteur
                });
        } else {
            document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>'; // Réinit capteur
            document.getElementById('lstCapteur').setAttribute('disabled', true); // Désactive
        }
    });

    // Changement de capteur = mise à jour graphique
    document.getElementById('lstCapteur').addEventListener('change', function () {
        const capteurId = this.value; // ID capteur
        const startDate = document.getElementById('startDate').value; // Date début
        const startTime = document.getElementById('startTime').value; // Heure début
        const endDate = document.getElementById('endDate').value; // Date fin
        const endTime = document.getElementById('endTime').value; // Heure fin
        updateChart(capteurId, document.getElementById('monGraphique'), startDate, startTime, endDate, endTime); // MAJ graphique
    });

    // Ouverture de la modale d'ajout
    document.getElementById('ajoutCourbe').addEventListener('click', function () {
        synchroniserPlageTemporelleAjout(); // Copie la plage
        document.getElementById('ajoutCourbeDiv').style.display = 'block'; // Affiche modale
    });

    // Fermeture modale d'ajout
    document.getElementById('closeAjoutCourbe').addEventListener('click', function () {
        document.getElementById('ajoutCourbeDiv').style.display = 'none'; // Cache modale
        const backdrop = document.getElementById('ajoutCourbeBackdrop'); // Fond si présent
        if (backdrop) backdrop.remove(); // Supprime fond
    });

    // Validation ajout courbe
    document.getElementById('validerAjoutCourbe').addEventListener('click', function () {
        if (document.getElementById('synchroPlageAjout').checked) synchroniserPlageTemporelleAjout(); // Si synchro activée
        var capteurId = document.getElementById('lstCapteurAjout').value; // ID capteur
        const startDate = document.getElementById('startDateAjout').value; // Date début
        const startTime = document.getElementById('startTimeAjout').value; // Heure début
        const endDate = document.getElementById('endDateAjout').value; // Date fin
        const endTime = document.getElementById('endTimeAjout').value; // Heure fin
        const plage = `${startDate} ${startTime} -> ${endDate} ${endTime}`; // Plage textuelle
        ajouterDonneesCourbe(capteurId); // Ajout courbe
        document.getElementById('ajoutCourbeDiv').style.display = 'none'; // Ferme modale
        const backdrop = document.getElementById('ajoutCourbeBackdrop'); // Fond
        if (backdrop) backdrop.remove(); // Supprime fond
    });

    definirPlageTemporelleParDefaut(); // Définit valeurs plage par défaut

    var serreIdParDefaut = 1; // ID par défaut serre
    var chapelleIdParDefaut = 1; // Chapelle
    var carteDevEuiParDefaut = "0004a30b00216c4c"; // Carte
    var capteurIdParDefaut = 1; // Capteur

    // Sélection par défaut en cascade
    selectionnerParDefaut('lstSerre', serreIdParDefaut, function () {
        setTimeout(function () {
            selectionnerParDefaut('lstChapelle', chapelleIdParDefaut, function () {
                setTimeout(function () {
                    selectionnerParDefaut('lstCarte', carteDevEuiParDefaut, function () {
                        setTimeout(function () {
                            selectionnerParDefaut('lstCapteur', capteurIdParDefaut); // Fin cascade
                        }, 100);
                    });
                }, 100);
            });
        }, 100);
    });

    // Ouverture modale suppression
    document.getElementById('supprimerCourbe').addEventListener('click', function () {
        if (graphiquesAjoutes.length < 1) {
            alert("Il ne reste que le graphique principal. Vous ne pouvez pas le supprimer."); // Empêche suppression du principal
            return;
        }
        const liste = document.getElementById('listeGraphiquesASupprimer'); // Liste déroulante
        liste.innerHTML = '<option value="">-- Sélectionner un graphique --</option>'; // Reset options
        graphiquesAjoutes.forEach((graph, index) => {
            const option = document.createElement('option'); // Crée option
            option.value = index; // Index
            option.textContent = `Graphique ${index + 2} – Capteur ${graph.capteurId} (${graph.plage})`; // Libellé
            liste.appendChild(option); // Ajoute
        });
        document.getElementById('suppressionCourbeDiv').style.display = 'block'; // Affiche modale
    });

    // Annule suppression
    document.getElementById('annulerSuppressionGraphique').addEventListener('click', function () {
        document.getElementById('suppressionCourbeDiv').style.display = 'none'; // Cache modale
    });

    // Ferme la modale suppression
    document.getElementById('closeSuppressionCourbe').addEventListener('click', function () {
        document.getElementById('suppressionCourbeDiv').style.display = 'none'; // Cache modale
    });

    // Confirme suppression graphique
    document.getElementById('confirmerSuppressionGraphique').addEventListener('click', function () {
        const index = document.getElementById('listeGraphiquesASupprimer').value; // Index sélectionné
        if (index === "") return; // Rien sélectionné
        const graphique = graphiquesAjoutes[index]; // Données du graphique
        const capteurId = graphique.capteurId; // ID capteur
        const plage = graphique.plage; // Plage horaire
        const blocs = document.querySelectorAll('.graphiqueSecondaire'); // Tous les blocs secondaires
        blocs.forEach(bloc => {
            if (bloc.getAttribute('data-capteur-id') === capteurId && bloc.getAttribute('data-plage') === plage) {
                const canvas = bloc.querySelector('canvas'); // Canvas
                if (canvas && canvas.myChart) canvas.myChart.destroy(); // Détruit le graphique
                bloc.remove(); // Supprime le bloc
            }
        });
        const numeroGraphique = parseInt(index) + 2; // Numéro visuel
        const blocInfo = document.getElementById(`blocGraphique${numeroGraphique}`); // Bloc info
        if (blocInfo) blocInfo.remove(); // Supprime info
        let i = numeroGraphique + 1; // Boucle de décalage
        while (true) {
            const suivant = document.getElementById(`blocGraphique${i}`); // Bloc suivant
            if (!suivant) break; // Fin
            suivant.id = `blocGraphique${i - 1}`; // Change ID
            const titre = suivant.querySelector('strong'); // Titre
            if (titre) titre.textContent = `— Données Graphique ${i - 1} —`; // MAJ titre
            i++;
        }
        graphiquesAjoutes.splice(index, 1); // Supprime de la liste
        document.getElementById('suppressionCourbeDiv').style.display = 'none'; // Ferme modale
        const encoreSecondaires = document.querySelectorAll('.graphiqueSecondaire'); // Vérifie restants
        if (encoreSecondaires.length === 0) {
            const principal = document.getElementById('Graphique'); // Bloc principal
            principal.classList.remove('graphiqueMoitié'); // Plein écran
            principal.classList.add('graphiquePlein'); // Plein écran
        }
    });

    const synchroCheckbox = document.getElementById('synchroPlageAjout'); // Checkbox synchro
    if (synchroCheckbox) {
        synchroCheckbox.addEventListener('change', function () {
            const disabled = this.checked; // Vérifie état
            document.getElementById('startDateAjout').disabled = disabled; // Active/désactive
            document.getElementById('startTimeAjout').disabled = disabled;
            document.getElementById('endDateAjout').disabled = disabled;
            document.getElementById('endTimeAjout').disabled = disabled;
            if (disabled) synchroniserPlageTemporelleAjout(); // MAJ si synchro
        });
    }

    gererSelectionSerreAjout('lstSerreAjout', 'lstChapelleAjout', 'lstCarteAjout', 'lstCapteurAjout'); // Cascade pour ajout

    document.getElementById('closePlageMain').addEventListener('click', function () {
        document.getElementById('model').style.display = 'none'; // Ferme modale plage
    });

    // Mode sombre
    const modeIcon = document.getElementById('modeIcon'); // Icône
    const body = document.body; // Corps

    if (localStorage.getItem('theme') === 'dark') {
        body.classList.add('dark-mode'); // Applique thème sombre
        modeIcon.src = '../img/soleil.svg'; // Change icône
        modeIcon.title = 'Mode clair'; // Change tooltip
    }

    document.getElementById('modeIcon').addEventListener('click', () => {
        document.body.classList.toggle('dark-mode'); // Alterne le thème
        const modeIcon = document.getElementById('modeIcon'); // Récupère icône
        const isDark = document.body.classList.contains('dark-mode'); // Vérifie mode
        modeIcon.src = isDark ? '../img/soleil.svg' : '../img/lune.svg'; // Icône
        modeIcon.title = isDark ? 'Mode clair' : 'Mode sombre'; // Tooltip
        modeIcon.alt = isDark ? 'Mode sombre' : 'Mode clair'; // Alt
        rafraichirCouleursGraphiques(); // MAJ couleurs
    });

    // Ajout du bouton CSV au graphique principal
    if (!document.getElementById('exportPrincipal')) {
        const blocPrincipal = document.getElementById('Graphique');
        const boutonExportPrincipal = document.createElement('img');
        boutonExportPrincipal.src = '../img/download.svg';
        boutonExportPrincipal.alt = 'Export';
        boutonExportPrincipal.title = 'Export CSV';
        boutonExportPrincipal.className = 'img-export';
        boutonExportPrincipal.id = 'exportPrincipal';
        boutonExportPrincipal.addEventListener('click', exportCSV);

        blocPrincipal.style.position = 'relative';
        blocPrincipal.appendChild(boutonExportPrincipal);
    }
});

const graphiquesAjoutes = []; // Tableau des courbes secondaires"

Fonctions.js :

"// Fonctions.js optimisé et commenté ligne par ligne

// --- Gestion des modales ---
function ouvertureModel() {
    document.getElementById('model').style.display = 'block'; // Affiche la modale de sélection temporelle principale
}

function fermetureModel() {
    document.getElementById('model').style.display = 'none'; // Cache la modale de sélection temporelle principale
}

function ouvertureModelAjout() {
    document.getElementById('model').style.display = 'block'; // Réutilisé pour affichage modale ajout (inutile car identique à ouvertureModel)
}

// --- Récupération des mesures depuis le serveur ---
function getMesures(capteurId, startDate = null, startTime = null, endDate = null, endTime = null) {
    let url = `getMesures.php?capteur_id=${capteurId}`; // Base de l'URL pour récupérer les mesures du capteur
    if (startDate && startTime && endDate && endTime) {
        url += `&startDate=${startDate}&startTime=${startTime}&endDate=${endDate}&endTime=${endTime}`; // Ajout des bornes temporelles si définies
    }
    return fetch(url).then(response => response.json()); // Requête et transformation JSON
}

// --- Mise à jour du graphique principal ---
function updateChart(capteurId, canvas, startDate = null, startTime = null, endDate = null, endTime = null) {
    if (!capteurId) return console.warn("Aucun capteur sélectionné."); // Vérifie qu'un capteur est sélectionné

    fetch(`getCapteurInfo.php?capteur_id=${capteurId}`) // Récupère les infos du capteur
        .then(res => res.json())
        .then(capteurInfo => {
            const { GrandeurCapt: grandeur, Unite: unite } = capteurInfo; // Récupère les infos utiles
            getMesures(capteurId, startDate, startTime, endDate, endTime).then(data => {
                if (!Array.isArray(data.mesures)) return console.error("Données invalides :", data); // Vérifie le format
                const labels = data.mesures.map(m => m.Horodatage); // Horodatages
                const values = data.mesures.map(m => parseFloat(parseFloat(m.Valeur).toFixed(1))); // Valeurs arrondies à 1 décimale

                renderChart(canvas, labels, [{
                    label: grandeur === "Direction du vent" ? grandeur : `${grandeur} (${unite})`,
                    data: values,
                    borderColor: 'rgb(231, 57, 57)',
                    tension: 0.1
                }], unite);

                updateInfoGraphique(values, unite, capteurId, 1, grandeur); // Met à jour les infos
            });
        });
}

// --- Création / mise à jour d’un graphique Chart.js ---
function renderChart(canvas, labels, datasets, unite, grandeur = null) {
    const ctx = canvas.getContext('2d');
    canvas.width = canvas.height = null; // Réinitialise les dimensions
    if (canvas.myChart) canvas.myChart.destroy(); // Détruit l'ancien graphique s'il existe

    if (grandeur) canvas.setAttribute('data-grandeur', grandeur); // Ajoute l'attribut grandeur au canvas
    const isDark = document.body.classList.contains('dark-mode'); // Détecte le mode sombre

    canvas.myChart = new Chart(ctx, {
        type: 'line',
        data: { labels, datasets },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    title: { display: true, text: unite, color: isDark ? '#fff' : '#000' },
                    ticks: { color: isDark ? '#fff' : '#000' },
                    grid: { color: isDark ? '#555' : '#e0e0e0' }
                },
                x: {
                    ticks: { color: isDark ? '#fff' : '#000' },
                    grid: { color: isDark ? '#555' : '#e0e0e0' }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        font: { family: 'Arial', size: 12 },
                        color: isDark ? '#fff' : '#000'
                    }
                }
            }
        }
    });
}

// --- Mise à jour des infos min/max/moy/actuelle ---
function updateInfoGraphique(values, unite, capteurId = null, numeroGraphique = 1, grandeur = null) {
    const infoDiv = document.getElementById('infoGraphique');
    if (!infoDiv) return;

    const ancienBloc = document.getElementById(`blocGraphique${numeroGraphique}`);
    if (ancienBloc) ancienBloc.remove(); // Supprime le précédent bloc si existant

    const bloc = document.createElement('div');
    bloc.id = `blocGraphique${numeroGraphique}`;
    bloc.className = 'blocInfoGraphique';
    bloc.innerHTML = `<strong>— Données Graphique ${numeroGraphique} —</strong><br>`;

    if (values && values.length > 0) {
        const min = Math.min(...values);
        const max = Math.max(...values);
        const moyenne = values.reduce((acc, val) => acc + val, 0) / values.length;

        if (grandeur === "Direction du vent" || unite === "°") {
            Promise.all([
                fetch(`getDirectionVent.php?angle=${values.at(-1)}`).then(r => r.json()),
                fetch(`getDirectionVent.php?angle=${min}`).then(r => r.json()),
                fetch(`getDirectionVent.php?angle=${max}`).then(r => r.json()),
                fetch(`getDirectionVent.php?angle=${moyenne}`).then(r => r.json())
            ]).then(([actuelle, minDir, maxDir, moyenneDir]) => {
                bloc.innerHTML += `
                    <span>Actuelle : ${values.at(-1).toFixed(1)}° (${actuelle.direction})</span><br>
                    <span>Minimum (plage) : ${min.toFixed(1)}° (${minDir.direction})</span><br>
                    <span>Maximum (plage) : ${max.toFixed(1)}° (${maxDir.direction})</span><br>
                    <span>Moyenne (plage) : ${moyenne.toFixed(1)}° (${moyenneDir.direction})</span><br><br>
                `;
            });
        } else {
            bloc.innerHTML += `
                <span class="valActuelle">Actuelle : ...</span><br>
                <span>Minimum (plage) : ${min.toFixed(1)} ${unite}</span><br>
                <span>Maximum (plage) : ${max.toFixed(1)} ${unite}</span><br>
                <span>Moyenne (plage) : ${moyenne.toFixed(1)} ${unite}</span><br><br>
            `;
        }
    } else {
        bloc.innerHTML += `<span>Aucune donnée à afficher pour cette plage.</span><br><br>`;
    }

    infoDiv.appendChild(bloc);

    // Met à jour la valeur actuelle en asynchrone
    if (capteurId) {
        fetch(`getDerniereMesure.php?capteur_id=${capteurId}`)
            .then(res => res.json())
            .then(data => {
                const span = bloc.querySelector('.valActuelle');
                span.textContent = data && data.Valeur ? `Actuelle : ${parseFloat(data.Valeur).toFixed(1)} ${unite}` : "Actuelle : non disponible";
            })
            .catch(() => {
                const span = bloc.querySelector('.valActuelle');
                if (span) span.textContent = "Actuelle : erreur";
            });
    }
}

// --- Définir plage par défaut : hier -> maintenant ---
function definirPlageTemporelleParDefaut() {
    const maintenant = new Date();
    const debut = new Date(maintenant);
    debut.setDate(debut.getDate() - 1);

    document.getElementById('startDate').value = debut.toISOString().slice(0, 10);
    document.getElementById('startTime').value = debut.toTimeString().slice(0, 5);
    document.getElementById('endDate').value = maintenant.toISOString().slice(0, 10);
    document.getElementById('endTime').value = maintenant.toTimeString().slice(0, 5);

    updateChartWithTimeRange(); // Charge les données avec la plage définie
}

// --- Met à jour le graphique avec la plage sélectionnée ---
function updateChartWithTimeRange() {
    const capteurId = document.getElementById('lstCapteur').value;
    const startDate = document.getElementById('startDate').value;
    const startTime = document.getElementById('startTime').value;
    const endDate = document.getElementById('endDate').value;
    const endTime = document.getElementById('endTime').value;

    updateChart(capteurId, document.getElementById('monGraphique'), startDate, startTime, endDate, endTime);
    fermetureModel();
}

// --- Génériques de gestion des select ---
function remplirSelect(selectId, options, valueKey, labelKey) {
    const select = document.getElementById(selectId); // Récupère le select
    select.innerHTML = '<option value="">-- Sélectionnez --</option>'; // Réinitialise avec une option par défaut
    options.forEach(item => {
        const option = document.createElement('option'); // Crée une nouvelle option
        option.value = item[valueKey]; // Définit la valeur
        option.textContent = item[labelKey]; // Définit le texte affiché
        select.appendChild(option); // Ajoute l’option au select
    });
}

function reinitialiserSelects(ids) {
    ids.forEach(id => {
        const select = document.getElementById(id); // Récupère le select
        if (select) select.innerHTML = '<option value="">-- Sélectionnez --</option>'; // Le vide avec l’option par défaut
    });
}

function selectionnerParDefaut(selectId, valeurParDefaut, callback = null) {
    const select = document.getElementById(selectId); // Récupère le select
    if (!select) return; // Sort si le select n’existe pas

    const option = Array.from(select.options).find(opt => opt.value == valeurParDefaut); // Trouve l’option par défaut
    if (option) {
        option.selected = true; // La sélectionne
        const event = new Event('change'); // Crée un événement de changement
        select.dispatchEvent(event); // Le déclenche

        if (typeof callback === 'function') callback(100); // Appelle le callback si défini
    }
}

function activerSelect(id) {
    const select = document.getElementById(id); // Récupère le select
    if (select) select.removeAttribute('disabled'); // Active le select
}

function desactiverSelects(ids) {
    ids.forEach(id => {
        const select = document.getElementById(id); // Récupère le select
        if (select) select.setAttribute('disabled', true); // Désactive le select
    });
}

// --- Utilitaires divers ---

// --- Couleurs fixes pour les courbes ---
const couleurListe = [
    'rgb(57, 130, 231)',  // Bleu
    'rgb(57, 231, 123)',  // Vert
    'rgb(255, 165, 0)',   // Orange
    'rgb(156, 39, 176)',  // Violet
    'rgb(0, 188, 212)',   // Cyan
    'rgb(231, 57, 57)'    // Rouge
];

let indexCouleur = 0; // Index de la couleur actuelle

function getNextColor() {
    const couleur = couleurListe[indexCouleur]; // Récupère la couleur actuelle
    indexCouleur = (indexCouleur + 1) % couleurListe.length; // Incrémente et boucle si nécessaire
    return couleur; // Retourne la couleur
}

function formaterHorodatage(horodatage) {
    const date = new Date(horodatage); // Convertit la chaîne en objet Date
    return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`; // Formate la date et l'heure
}

function exportCSV() {
    const canvas = document.getElementById('monGraphique'); // Récupère le canvas principal
    const chart = canvas.myChart; // Récupère le graphique
    if (!chart || !chart.data.labels.length) {
        alert("Aucune donnée à exporter."); // Alerte s'il n'y a pas de données
        return;
    }

    const labels = chart.data.labels; // Récupère les dates
    const dataset = chart.data.datasets[0]; // Récupère le dataset
    const values = dataset.data; // Récupère les valeurs

    const startDate = document.getElementById('startDate').value; // Début date
    const startTime = document.getElementById('startTime').value; // Début heure
    const endDate = document.getElementById('endDate').value; // Fin date
    const endTime = document.getElementById('endTime').value; // Fin heure

    const now = new Date(); // Date actuelle
    const exportDate = `${now.getDate().toString().padStart(2, '0')}/${(now.getMonth()+1).toString().padStart(2, '0')}/${now.getFullYear()} ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`; // Format date d’export

    const formatNom = (str) => str.replaceAll(":", "-").replaceAll("/", "-").replaceAll(" ", "_"); // Remplace les caractères interdits

    const debut = formatNom(`${startDate} ${startTime}`); // Format du début
    const fin = formatNom(`${endDate} ${endTime}`); // Format de fin

    const selectCapteur = document.getElementById('lstCapteur'); // Récupère le select du capteur
    let nomCapteur = "Capteur inconnu"; // Valeur par défaut
    if (selectCapteur && selectCapteur.options[selectCapteur.selectedIndex]) {
        nomCapteur = selectCapteur.options[selectCapteur.selectedIndex].textContent.trim(); // Nom du capteur sélectionné
    }

    const grandeurAvecUnite = dataset.label.trim(); // Libellé du graphique

    let csvContent = `Export réalisé par : ${utilisateurNomComplet}\r\n`; // Ligne d’entête
    csvContent += `Date d'export : ${exportDate}\r\n`;
    csvContent += `Nom du capteur : ${nomCapteur}\r\n`;
    csvContent += `Grandeur mesurée : ${grandeurAvecUnite}\r\n`;
    csvContent += `Plage de mesure : ${startDate} ${startTime} -> ${endDate} ${endTime}\r\n\r\n`;
    csvContent += "Horodatage;Valeur\r\n"; // En-tête du tableau

    for (let i = 0; i < labels.length; i++) {
        csvContent += `${formaterHorodatage(labels[i])};${parseFloat(values[i]).toFixed(1)}\r\n`; // Ajoute chaque ligne
    }

    const blob = new Blob(["\uFEFF" + csvContent], { type: 'text/csv;charset=utf-8;' }); // Crée le blob CSV
    const url = URL.createObjectURL(blob); // Génère l’URL du fichier
    const fileName = `Capteur_${formatNom(nomCapteur)}__${debut}_a_${fin}.csv`; // Nom du fichier

    const link = document.createElement("a"); // Crée un lien de téléchargement
    link.setAttribute("href", url);
    link.setAttribute("download", fileName);
    document.body.appendChild(link); // Ajoute le lien au DOM
    link.click(); // Déclenche le téléchargement
    document.body.removeChild(link); // Nettoyage
    URL.revokeObjectURL(url); // Libère l’URL
}

function gererSelectionSerreAjout(serreId, chapelleId, carteId, capteurId) {
    const serreSelect = document.getElementById(serreId);       // Select des serres
    const chapelleSelect = document.getElementById(chapelleId); // Select des chapelles
    const carteSelect = document.getElementById(carteId);       // Select des cartes
    const capteurSelect = document.getElementById(capteurId);   // Select des capteurs

    if (!serreSelect || !chapelleSelect || !carteSelect || !capteurSelect) {
        console.error("Erreur : un ou plusieurs sélecteurs n'existent pas."); // Vérifie l'existence des éléments
        return;
    }

    serreSelect.addEventListener('change', function () {
        const idSerre = this.value; // Récupère la serre sélectionnée
        if (idSerre) {
            fetch(`getChapelles.php?serre_id=${idSerre}`) // Récupère les chapelles associées
                .then(response => response.json())
                .then(chapelles => {
                    remplirSelect(chapelleId, chapelles, 'IdChapelle', 'Nom'); // Remplit le select chapelle
                    activerSelect(chapelleId); // Active le select
                    reinitialiserSelects([carteId, capteurId]); // Réinitialise les selects suivants
                    desactiverSelects([carteId, capteurId]); // Et les désactive
                });
        } else {
            reinitialiserSelects([chapelleId, carteId, capteurId]); // Réinitialise tous
            desactiverSelects([chapelleId, carteId, capteurId]);    // Désactive tous
        }
    });

    chapelleSelect.addEventListener('change', function () {
        const idChapelle = this.value; // Récupère la chapelle sélectionnée
        if (idChapelle) {
            fetch(`getCartes.php?chapelle_id=${idChapelle}`) // Récupère les cartes associées
                .then(response => response.json())
                .then(cartes => {
                    remplirSelect(carteId, cartes, 'DevEui', 'Nom'); // Remplit le select carte
                    activerSelect(carteId); // Active le select
                    reinitialiserSelects([capteurId]); // Réinitialise capteur
                    desactiverSelects([capteurId]);    // Et le désactive
                });
        } else {
            reinitialiserSelects([carteId, capteurId]); // Réinitialise les 2
            desactiverSelects([carteId, capteurId]);    // Désactive les 2
        }
    });

    carteSelect.addEventListener('change', function () {
        const idCarte = this.value; // Récupère la carte sélectionnée
        if (idCarte) {
            fetch(`getCapteurs.php?carte_id=${idCarte}`) // Récupère les capteurs associés
                .then(response => response.json())
                .then(capteurs => {
                    remplirSelect(capteurId, capteurs, 'IdCapteur', 'Nom'); // Remplit le select capteur
                    activerSelect(capteurId); // Active le select
                });
        } else {
            reinitialiserSelects([capteurId]); // Réinitialise capteur
            desactiverSelects([capteurId]);    // Désactive capteur
        }
    });
}

function synchroniserPlageTemporelleAjout() {
    // Copie les valeurs de la plage temporelle principale dans les champs d'ajout de courbe
    document.getElementById('startDateAjout').value = document.getElementById('startDate').value;
    document.getElementById('startTimeAjout').value = document.getElementById('startTime').value;
    document.getElementById('endDateAjout').value = document.getElementById('endDate').value;
    document.getElementById('endTimeAjout').value = document.getElementById('endTime').value;
}

function supprimerCourbe() {
    const divGraphiques = document.getElementById('divGraphiques'); // Conteneur des blocs de graphiques
    const canvasList = divGraphiques.querySelectorAll('canvas'); // Liste des canvas présents

    if (canvasList.length > 1) { // Vérifie qu'au moins un graphique secondaire existe
        const dernierCanvas = canvasList[canvasList.length - 1]; // Cible le dernier graphique ajouté

        if (dernierCanvas.id !== 'monGraphique') { // Ne supprime pas le graphique principal
            if (dernierCanvas.myChart) dernierCanvas.myChart.destroy(); // Détruit le graphique Chart.js

            const blocASupprimer = dernierCanvas.parentElement; // Récupère le conteneur du canvas
            const capteurId = blocASupprimer.getAttribute('data-capteur-id'); // ID du capteur du bloc
            const plage = blocASupprimer.getAttribute('data-plage'); // Plage temporelle du bloc

            const blocInfo = document.getElementById(`blocGraphique2`); // Cible l'info associée (fixé à 2)
            if (blocInfo) blocInfo.remove(); // Supprime l'infobulle associée (graphique 2 uniquement ici)

            // Décale les blocs suivants (si plus de 2 courbes)
            for (let i = 3; ; i++) {
                const blocSuivant = document.getElementById(`blocGraphique${i}`);
                if (!blocSuivant) break;

                blocSuivant.id = `blocGraphique${i - 1}`; // Met à jour l'ID
                const titre = blocSuivant.querySelector('strong'); // Met à jour le titre du bloc
                if (titre) titre.innerHTML = `— Données Graphique ${i - 1} —`;
            }

            // Supprime l'entrée dans graphiquesAjoutes
            const index = graphiquesAjoutes.findIndex(item => item.capteurId === capteurId && item.plage === plage);
            if (index !== -1) graphiquesAjoutes.splice(index, 1);

            blocASupprimer.remove(); // Supprime le bloc graphique du DOM

            const encoreSecondaires = divGraphiques.querySelectorAll('.graphiqueSecondaire'); // Vérifie les restants
            if (encoreSecondaires.length === 0) {
                const graphiquePrincipal = document.getElementById('Graphique'); // Cible le bloc principal
                graphiquePrincipal.classList.remove('graphiqueMoitié');
                graphiquePrincipal.classList.add('graphiquePlein');
            }
        }
    } else {
        alert('Il ne reste plus que le graphique principal. Vous ne pouvez pas le supprimer.'); // Message de protection
    }
}

function ajouterDonneesCourbe(capteurId) {
    if (!capteurId) {
        console.warn("Aucun capteur sélectionné pour ajouter une courbe."); // Capteur non défini
        return;
    }

    const startDate = document.getElementById('startDateAjout').value; // Date début
    const startTime = document.getElementById('startTimeAjout').value; // Heure début
    const endDate = document.getElementById('endDateAjout').value;     // Date fin
    const endTime = document.getElementById('endTimeAjout').value;     // Heure fin

    const plage = `${startDate} ${startTime} -> ${endDate} ${endTime}`; // Plage temporelle

    const dejaAjoute = graphiquesAjoutes.some(item =>
        item.capteurId == capteurId && item.plage.trim() === plage.trim()
    ); // Vérifie doublon

    if (dejaAjoute) {
        const capteurSelect = document.getElementById('lstCapteurAjout'); // Récupère select
        const capteurNom = capteurSelect.options[capteurSelect.selectedIndex]?.textContent.trim() || "inconnu";
        alert(`Erreur : le capteur "${capteurNom}" est déjà affiché pour la plage suivante :\n${plage}`); // Alerte
        return;
    }

    fetch(`getCapteurInfo.php?capteur_id=${capteurId}`) // Info capteur
        .then(res => res.json())
        .then(capteurInfo => {
            const grandeur = capteurInfo.GrandeurCapt; // Grandeur
            const unite = capteurInfo.Unite;           // Unité

            getMesures(capteurId, startDate, startTime, endDate, endTime).then(data => {
                if (!Array.isArray(data.mesures)) {
                    console.error("Données invalides :", data);
                    return;
                }

                const labels = data.mesures.map(m => m.Horodatage); // X : temps
                const values = data.mesures.map(m => parseFloat(parseFloat(m.Valeur).toFixed(1))); // Y : valeurs

                const divGraphiques = document.getElementById('divGraphiques');

                const graphiquePrincipalBloc = document.getElementById('Graphique');
                if (graphiquePrincipalBloc) {
                    graphiquePrincipalBloc.classList.remove('graphiquePlein');
                    graphiquePrincipalBloc.classList.add('graphiqueMoitié');
                    graphiquePrincipalBloc.classList.remove('graphiqueSecondaire');
                    graphiquePrincipalBloc.classList.add('graphiqueSecondaire');
                    graphiquePrincipalBloc.style.flex = '1 1 calc(50% - 10px)';
                    graphiquePrincipalBloc.style.maxWidth = 'calc(50% - 10px)';
                }

                const newBloc = document.createElement('div');
                newBloc.className = 'graphiqueBloc graphiqueSecondaire';
                newBloc.style.position = 'relative';
                newBloc.setAttribute('data-capteur-id', capteurId);
                newBloc.setAttribute('data-plage', plage);

                const newCanvas = document.createElement('canvas');
                newBloc.appendChild(newCanvas);

                const boutonExport = document.createElement('img');
                boutonExport.src = '../img/download.svg';
                boutonExport.alt = 'Export';
                boutonExport.title = 'Export CSV';
                boutonExport.className = 'img-export';
                boutonExport.addEventListener('click', function () { exportCSVDepuisCanvas(newCanvas); });

                newBloc.appendChild(boutonExport);
                divGraphiques.appendChild(newBloc);

                renderChart(newCanvas, labels, [{
                    label: grandeur === "Direction du vent" ? grandeur : `${grandeur} (${unite})`,
                    data: values,
                    borderColor: getNextColor(),
                    tension: 0.1
                }], unite, grandeur); // Affiche graphique

                graphiquesAjoutes.push({ capteurId: String(capteurId), plage }); // Ajoute à la liste

                const numeroGraphique = graphiquesAjoutes.length + 1; // Numérotation (1 = principal)
                updateInfoGraphique(values, unite, capteurId, numeroGraphique, grandeur); // Infos min/max/moy
            });
        });
}

function exportCSVDepuisCanvas(canvas) {
    const chart = canvas.myChart;
    if (!chart || !chart.data.labels?.length) {
        alert("Aucune donnée à exporter."); // Alerte si aucune donnée n’est présente
        return;
    }

    const labels = chart.data.labels; // Récupère les horodatages
    const dataset = chart.data.datasets[0]; // Récupère le dataset unique du graphique
    const values = dataset.data; // Récupère les valeurs

    const bloc = canvas.parentElement; // Accède au conteneur du graphique
    const capteurId = bloc.getAttribute('data-capteur-id'); // ID du capteur
    const plage = bloc.getAttribute('data-plage'); // Plage temporelle affichée

    const [startDateTime, endDateTime] = plage.split('->').map(str => str.trim()); // Découpe la plage
    const [startDate, startTime] = startDateTime.split(' '); // Sépare date et heure de début
    const [endDate, endTime] = endDateTime.split(' '); // Sépare date et heure de fin

    fetch(`getCapteurInfo.php?capteur_id=${capteurId}`) // Récupère les infos du capteur
        .then(res => res.json())
        .then(capteurInfo => {
            const grandeur = capteurInfo.GrandeurCapt; // Grandeur mesurée
            const unite = capteurInfo.Unite; // Unité de mesure
            const nomCapteur = capteurInfo.Nom || `Capteur ${capteurId}`; // Nom du capteur ou valeur par défaut

            const formatNom = str => str.replaceAll(":", "-").replaceAll("/", "-").replaceAll(" ", "_"); // Formatage nom de fichier
            const debut = formatNom(labels[0]); // Première date pour nom fichier
            const fin = formatNom(labels.at(-1)); // Dernière date

            const now = new Date(); // Date actuelle pour l’export
            const exportDate = `${String(now.getDate()).padStart(2, '0')}/${String(now.getMonth() + 1).padStart(2, '0')}/${now.getFullYear()} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;

            let csvContent = `Export réalisé par : ${utilisateurNomComplet}\r\n`;
            csvContent += `Date d'export : ${exportDate}\r\n`;
            csvContent += `Nom du capteur : ${nomCapteur}\r\n`;
            csvContent += `Grandeur mesurée : ${dataset.label}\r\n`;
            csvContent += `Plage de mesure : ${startDateTime} -> ${endDateTime}\r\n\r\n`;
            csvContent += "Horodatage;Valeur\r\n";

            for (let i = 0; i < labels.length; i++) {
                csvContent += `${formaterHorodatage(labels[i])};${parseFloat(values[i]).toFixed(1)}\r\n`; // Ligne de données formatée
            }

            const blob = new Blob(["\uFEFF" + csvContent], { type: 'text/csv;charset=utf-8;' }); // Création du fichier avec BOM
            const url = URL.createObjectURL(blob); // Génère l’URL temporaire
            const fileName = `Capteur_${formatNom(nomCapteur)}__${debut}_a_${fin}.csv`; // Nom de fichier final

            const link = document.createElement("a"); // Création du lien
            link.setAttribute("href", url);
            link.setAttribute("download", fileName);
            document.body.appendChild(link); // Ajout au DOM
            link.click(); // Déclenche le téléchargement
            document.body.removeChild(link); // Nettoyage
            URL.revokeObjectURL(url); // Libère l’URL
        });
}

function rafraichirCouleursGraphiques() {
    const isDark = document.body.classList.contains('dark-mode'); // Détection mode sombre
    const canvases = document.querySelectorAll('canvas');

    canvases.forEach(canvas => {
        if (canvas.myChart) {
            const chart = canvas.myChart;

            chart.options.scales.x.ticks.color = isDark ? '#fff' : '#000';
            chart.options.scales.y.ticks.color = isDark ? '#fff' : '#000';
            chart.options.scales.y.title.color = isDark ? '#fff' : '#000';
            chart.options.plugins.legend.labels.color = isDark ? '#fff' : '#000';

            chart.options.scales.x.grid.color = isDark ? '#555' : '#e0e0e0';
            chart.options.scales.y.grid.color = isDark ? '#555' : '#e0e0e0';

            chart.update(); // Rafraîchit le rendu
        }
    });
}"

modal.js :

"export async function fetchSelectOptions() { // Récupère les options des champs select
    try {
        const res = await fetch('getSelectOptions.php'); // Requête pour les options
        const options = await res.json(); // Conversion JSON
        return {
            EtatComposant: options.EtatComposant || [], // États possibles
            GrandeurCapt: options.GrandeurCapt || [], // Grandeurs
            Cartes: options.Cartes || [], // Cartes
            Unite: options.Unite || [] // Unités
        };
    } catch (e) {
        console.error('Erreur chargement options select :', e); // Log erreur
        return { EtatComposant: [], GrandeurCapt: [], Cartes: [], Unite: [] }; // Valeurs par défaut
    }
}

export async function openAddModal(currentTable, updateTable) { // Ouvre modale d’ajout
    try {
        const res = await fetch('getTableData.php?table=' + currentTable); // Structure de la table
        const data = await res.json(); // JSON
        const columns = data.columns.filter(c => // Filtre colonnes inutiles
            c !== 'Actions' && c !== 'IdCapteur' && c !== 'DateMiseEnService'
        );
        const options = await fetchSelectOptions(); // Charge options select

        const modal = document.createElement('div'); // Création modale
        modal.className = 'modal'; // Classe CSS
        if (document.body.classList.contains('dark-mode')) { // Mode sombre ?
            modal.classList.add('dark-mode'); // Applique style
        }
        modal.appendChild(createCloseButton(() => modal.remove())); // Bouton fermeture

        const form = document.createElement('form'); // Formulaire HTML
        form.className = 'modal-form'; // Classe CSS

        const titleContainer = document.createElement('div'); // Conteneur titre
        titleContainer.className = 'modal-title-container'; // Classe CSS

        titleContainer.appendChild(createTitle(`Ajouter un ${currentTable}`)); // Titre
        titleContainer.appendChild(createCloseButton(() => modal.remove())); // Bouton fermeture
        form.appendChild(titleContainer); // Ajoute au form

        columns.forEach(col => { // Pour chaque champ
            const label = document.createElement('label'); // Crée label
            label.textContent = getLabel(col); // Texte lisible
            label.setAttribute('for', col); // Associe au champ

            let input;
            if (col === 'EtatComposant') {
                input = createSelect(col, ['OK', 'Veille']); // Limite aux valeurs valides
            } else if (col === 'GrandeurCapt') {
                input = createSelect(col, options.GrandeurCapt); // Remplit grandeur

                input.addEventListener('change', async e => { // Change grandeur
                    const selectedGrandeur = e.target.value;
                    const uniteSelect = form.querySelector('#Unite'); // Select unité

                    uniteSelect.innerHTML = ''; // Réinitialise unité

                    try {
                        const res = await fetch(`getUnitesParGrandeur.php?grandeur=${encodeURIComponent(selectedGrandeur)}`); // Récupère unités
                        const unites = await res.json(); // JSON

                        unites.forEach(unite => { // Ajoute options
                            const opt = document.createElement('option');
                            opt.value = unite;
                            opt.textContent = unite;
                            uniteSelect.appendChild(opt);
                        });
                    } catch (error) {
                        console.error('Erreur lors de la récupération des unités :', error); // Log erreur
                    }
                });
            } else if (col === 'Unite') {
                input = document.createElement('select'); // Champ vide
                input.id = 'Unite';
                input.name = 'Unite';
            } else {
                input = document.createElement('input'); // Champ texte générique
                input.type = 'text';
                input.name = col;
                input.id = col;
            }

            form.appendChild(label); // Ajoute label
            form.appendChild(input); // Ajoute champ
        });

        if (currentTable === 'capteur') {
            form.appendChild(createCarteSelect(options.Cartes)); // Ajoute sélection carte
        }

        form.appendChild(createButtonContainer('Ajouter', () => modal.remove())); // Boutons
        modal.appendChild(form); // Ajoute form à modale
        document.body.appendChild(modal); // Ajoute modale au DOM
        modal.style.display = 'flex'; // Affiche modale

        const grandeurSelect = form.querySelector('#GrandeurCapt'); // Auto-déclenche changement
        if (grandueurSelect && grandeurSelect.value) {
            grandeurSelect.dispatchEvent(new Event('change'));
        }

        form.addEventListener('submit', async e => { // Validation formulaire
            e.preventDefault(); // Empêche rechargement
            const formData = new FormData(form); // Récupère données
            formData.append('table', currentTable); // Ajoute table

            const res = await fetch('insertRow.php', {
                method: 'POST',
                body: formData
            });

            const result = await res.json(); // Résultat serveur
            if (result.success) {
                alert('Ajout réussi'); // Succès
                modal.remove(); // Ferme modale
                updateTable(currentTable); // MAJ table
            } else {
                alert('Erreur : ' + result.error); // Affiche erreur
            }
        });
    } catch (error) {
        console.error('Erreur modale ajout :', error); // Log erreur
    }
}

export async function openEditModal(rowData, currentTable, updateTable) { // Ouvre modale édition
    try {
        const options = await fetchSelectOptions(); // Récupère options
        const modal = document.createElement('div'); // Crée modale
        modal.className = 'modal'; // Classe CSS
        modal.appendChild(createCloseButton(() => modal.remove())); // Bouton fermeture

        const form = document.createElement('form'); // Crée formulaire
        form.className = 'modal-form'; // Classe CSS

        const titleContainer = document.createElement('div'); // Conteneur titre
        titleContainer.className = 'modal-title-container'; // Classe CSS

        titleContainer.appendChild(createTitle(`Modifier ${currentTable}`)); // Titre
        titleContainer.appendChild(createCloseButton(() => modal.remove())); // Fermeture
        form.appendChild(titleContainer); // Ajoute au formulaire

        const ignore = ['IdCapteur', 'DevEui', 'DateMiseEnService', 'Actions']; // Champs ignorés

        Object.entries(rowData).forEach(([key, val]) => { // Pour chaque champ
            if (ignore.includes(key)) return; // Ignore si nécessaire

            const label = document.createElement('label'); // Label champ
            label.textContent = getLabel(key); // Texte lisible
            label.setAttribute('for', key); // Liaison

            let input;
            if (key === 'EtatComposant') {
                const allEtats = ['OK', 'Veille', 'HS']; // Tous les états
                const etatsDisponibles = allEtats.filter(etat => etat !== val); // Exclut état actuel
                input = createSelect(key, etatsDisponibles); // Crée select
            } else if (key === 'GrandeurCapt') {
                input = createSelect(key, options[key], val); // Sélecteur grandeur

                input.addEventListener('change', async (e) => { // MAJ unités
                    const selectedGrandeur = e.target.value;
                    const uniteSelect = form.querySelector('#Unite');
                    uniteSelect.innerHTML = '';
                    try {
                        const res = await fetch(`getUnitesParGrandeur.php?grandeur=${encodeURIComponent(selectedGrandeur)}`);
                        const unites = await res.json();
                        unites.forEach(unite => {
                            const opt = document.createElement('option');
                            opt.value = unite;
                            opt.textContent = unite;
                            uniteSelect.appendChild(opt);
                        });
                        if (unites.includes(rowData.Unite)) {
                            uniteSelect.value = rowData.Unite; // Re-sélectionne l’unité d’origine si présente
                        }
                    } catch (error) {
                        console.error("Erreur récupération unités :", error); // Log
                    }
                });
            } else if (key === 'Unite') {
                input = document.createElement('select'); // Select vide
                input.name = 'Unite';
                input.id = 'Unite';
            } else {
                input = document.createElement('input'); // Champ texte
                input.type = 'text';
                input.name = key;
                input.id = key;
                input.value = typeof val === 'number' ? parseFloat(val).toFixed(1) : val; // Affichage 1 décimale
            }

            form.appendChild(label); // Ajoute label
            form.appendChild(input); // Ajoute input
        });

        if (currentTable === 'capteur') {
            form.appendChild(createCarteSelect(options.Cartes, rowData.DevEui)); // Sélecteur carte
        }

        form.appendChild(createButtonContainer('Enregistrer', () => modal.remove())); // Boutons
        modal.appendChild(form); // Formulaire dans modale
        document.body.appendChild(modal); // Ajoute modale au DOM
        modal.style.display = 'flex'; // Affiche

        const grandeurSelect = form.querySelector('#GrandeurCapt'); // Déclenche MAJ unité
        if (grandeurSelect && grandeurSelect.value) {
            grandeurSelect.dispatchEvent(new Event('change')); // Simule sélection
        }

        form.addEventListener('submit', async e => { // Soumission
            e.preventDefault();
            const formData = new FormData(form); // Données form
            formData.append('table', currentTable); // Nom table

            const idKey = currentTable === 'capteur' ? 'IdCapteur' : 'DevEui'; // ID à envoyer
            formData.append('id', rowData[idKey]); // Ajoute ID

            const res = await fetch('updateRow.php', {
                method: 'POST',
                body: formData
            });

            const result = await res.json(); // Résultat
            if (result.success) {
                alert('Modification réussie'); // OK
                modal.remove(); // Ferme modale
                updateTable(currentTable); // MAJ tableau
            } else {
                alert('Erreur : ' + result.error); // Erreur
            }
        });
    } catch (error) {
        console.error('Erreur modale édition :', error); // Log
    }
}

function createTitle(text) { // Crée élément titre
    const title = document.createElement('h2');
    title.textContent = text;
    return title;
}

function getLabel(key) { // Associe nom de champ à un libellé lisible
    return {
        EtatComposant: 'État du composant',
        GrandeurCapt: 'Grandeur du capteur',
        Unite: 'Unité',
        DevEui: 'Carte associée'
    }[key] || key;
}

function createSelect(name, options, selected = '', exclude = []) { // Crée un <select>
    const select = document.createElement('select');
    select.name = name;
    select.id = name;

    options.forEach(opt => {
        const val = opt.value ?? opt;
        const label = opt.label ?? opt;
        if (exclude.includes(val)) return;
        const option = document.createElement('option');
        option.value = val;
        option.textContent = label;
        if (val == selected) option.selected = true;
        select.appendChild(option);
    });

    return select;
}

function createCarteSelect(cartes, selected = '') { // Crée bloc label + select pour cartes
    const label = document.createElement('label');
    label.textContent = 'Carte associée';
    label.setAttribute('for', 'DevEui');

    const select = document.createElement('select');
    select.name = 'DevEui';
    select.id = 'DevEui';

    cartes.forEach(carte => {
        const opt = document.createElement('option');
        opt.value = carte.DevEui;
        opt.textContent = carte.NomCarte || `Carte #${carte.DevEui}`;
        if (carte.DevEui == selected) opt.selected = true;
        select.appendChild(opt);
    });

    const container = document.createElement('div');
    container.appendChild(label);
    container.appendChild(select);
    return container;
}

function createButtonContainer(confirmText, onCancel) { // Crée bouton submit + annuler
    const container = document.createElement('div');
    container.className = 'modal-buttons';

    const submit = document.createElement('button');
    submit.type = 'submit';
    submit.textContent = confirmText;

    const cancel = document.createElement('button');
    cancel.type = 'button';
    cancel.textContent = 'Annuler';
    cancel.addEventListener('click', onCancel);

    container.append(submit, cancel);
    return container;
}

function createCloseButton(onClick) { // Crée bouton croix pour fermer
    const closeBtn = document.createElement('button');
    closeBtn.innerHTML = '&times;';
    closeBtn.className = 'modal-close';
    closeBtn.type = 'button';
    closeBtn.addEventListener('click', onClick);
    return closeBtn;
}"

Parametrage.js :

"import { openEditModal, openAddModal, fetchSelectOptions } from '../js/modal.js'; // Import des fonctions de gestion modale

// Lancer la vérification des capteurs & cartes inactifs dès chargement
window.addEventListener('DOMContentLoaded', () => {
    fetch('checkCapteursInactifs.php') // Vérifie les capteurs inactifs
        .then(r => r.text())
        .then(txt => console.log('[Capteurs vérifiés] ' + txt))
        .catch(err => console.error('[Erreur capteurs]', err));

    fetch('checkCartesInactives.php') // Vérifie les cartes inactives
        .then(r => r.text())
        .then(txt => console.log('[Cartes vérifiées] ' + txt))
        .catch(err => console.error('[Erreur cartes]', err));
});

// Interface dynamique
document.addEventListener('DOMContentLoaded', function () {
    const buttons = { // Associe chaque bouton à une table
        serre: 'selectSerre',
        chapelle: 'selectChapelle',
        carte: 'selectCarte',
        capteur: 'selectCapteur',
        utilisateur: 'selectUtilisateur'
    };

    const searchInput = document.getElementById('searchInput'); // Champ de recherche
    const tableHeader = document.querySelector('.tabParametrage thead tr'); // Ligne d'en-tête
    const tableBody = document.querySelector('.tabParametrage tbody'); // Corps du tableau
    let currentTable = 'capteur'; // Table affichée par défaut

    // Gérer les boutons de sélection de table
    Object.entries(buttons).forEach(([table, id]) => {
        document.getElementById(id).addEventListener('click', () => updateTable(table)); // Charge la table au clic
    });

    // Filtrage par texte
    searchInput.addEventListener('input', () => {
        const term = searchInput.value.toLowerCase(); // Texte en minuscules
        document.querySelectorAll('.divTableau tbody tr').forEach(row => {
            const visible = Array.from(row.cells).some(cell =>
                cell.textContent.toLowerCase().includes(term) // Filtre sur chaque cellule
            );
            row.style.display = visible ? '' : 'none'; // Affiche ou masque
        });
    });

    // Met à jour l’affichage d’une table
    async function updateTable(tableName) {
        currentTable = tableName; // Met à jour la table courante

        // Active le bon bouton
        Object.entries(buttons).forEach(([key, id]) => {
            document.getElementById(id).classList.toggle('active', key === tableName); // Active visuellement
        });

        try {
            const res = await fetch('getTableData.php?table=' + tableName); // Récupère les données
            const { columns, rows } = await res.json(); // Récupère colonnes et lignes

            tableHeader.innerHTML = ''; // Vide l'en-tête
            tableBody.innerHTML = ''; // Vide le corps

            columns.forEach(col => {
                if (currentTable === 'utilisateur' && col.toLowerCase() === 'mdp') return; // Ignore le mot de passe

                const th = document.createElement('th');
                th.textContent = col;
                th.classList.add(col.toLowerCase());
                if (col.toLowerCase() === 'commentaire') th.classList.add('commentaire');

                // Bouton Ajouter
                if (col === 'Actions' && ['carte', 'capteur'].includes(tableName)) {
                    const btn = document.createElement('img');
                    btn.src = '../img/plus.svg';
                    btn.alt = 'Ajouter';
                    btn.title = 'Ajouter';
                    btn.className = 'addImage';
                    btn.style.cursor = 'pointer';
                    btn.addEventListener('click', () => openAddModal(currentTable, updateTable)); // Ouvre la modale d'ajout
                    th.appendChild(btn);
                }

                tableHeader.appendChild(th); // Ajoute l'en-tête
            });

            // Lignes
            rows.forEach(row => {
                const tr = document.createElement('tr');

                columns.forEach(col => {
                    if (currentTable === 'utilisateur' && col.toLowerCase() === 'mdp') return; // Ignore la cellule mot de passe

                    const td = document.createElement('td');
                    td.classList.add(col.toLowerCase());

                    if (col === 'Actions') {
                        const idKey = Object.keys(row).find(k => k.toLowerCase().includes('id') || k === 'DevEui'); // Récupère clé ID
                        const id = row[idKey]; // ID de l’élément

                        const rowSansActions = { ...row }; // Copie de la ligne
                        delete rowSansActions.Actions; // Supprime champ Actions

                        // Bouton Modifier
                        const modifyBtn = createActionBtn('../img/modifier.svg', 'Modifier', () =>
                            openEditModal(rowSansActions, currentTable, updateTable)
                        );

                        // Bouton Supprimer
                        const deleteBtn = createActionBtn('../img/moins.svg', 'Supprimer', () => {
                            if (confirm(`Supprimer ce ${currentTable} ?`)) deleteRow(currentTable, id); // Confirmation
                        });
                        deleteBtn.classList.add('deleteImage');
                        deleteBtn.style.marginLeft = '5px';

                        td.appendChild(modifyBtn);
                        td.appendChild(deleteBtn);
                    } else {
                        td.textContent = row[col]; // Affiche la valeur brute
                    }

                    tr.appendChild(td);
                });

                tableBody.appendChild(tr); // Ajoute la ligne au tableau
            });

            searchInput.dispatchEvent(new Event('input')); // Rafraîchit le filtre
        } catch (err) {
            console.error('Erreur updateTable :', err); // Gestion des erreurs
        }
    }

    async function deleteRow(table, id) {
        try {
            const res = await fetch('deleteRow.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `table=${table}&id=${id}` // Paramètres à envoyer
            });
            const result = await res.json(); // Résultat
            if (result.success) {
                alert(`${table} supprimé`); // Confirmation
                updateTable(currentTable); // Rafraîchit la table
            } else {
                alert('Erreur : ' + result.error); // Affiche l'erreur
            }
        } catch (e) {
            console.error('Erreur suppression :', e); // Gestion erreur réseau
            alert('Erreur lors de la suppression');
        }
    }

    function createActionBtn(src, alt, onClick) {
        const img = document.createElement('img');
        img.src = src;
        img.alt = alt;
        img.title = alt;
        img.className = alt.toLowerCase() + 'Image'; // Classe CSS dynamique
        img.style.cursor = 'pointer';
        img.style.transition = 'transform 0.2s ease';
        img.addEventListener('mouseenter', () => img.style.transform = 'scale(1.3)'); // Zoom au survol
        img.addEventListener('mouseleave', () => img.style.transform = 'scale(1)'); // Dézoom
        img.addEventListener('click', onClick); // Clic sur l’image
        return img;
    }

    updateTable(currentTable); // Chargement initial de la table capteur
});"

Consultation.css :

"/* ------------------------ RESET GÉNÉRAL ------------------------ */
* { /* Réinitialise tous les éléments HTML */
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    text-decoration: none;
    list-style: none;
    font-family: calibri;
}

body { /* Corps de la page */
    min-width: 100px;
    min-height: 100px;
    background: #ffffff;
}

/* ------------------------ NAVBAR ------------------------ */
.navBar { /* Barre de navigation principale */
    width: 100%;
    height: 10vh;
    min-height: 77px;
    padding: 35px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: #77B5FE;
    font-size: 15px;
}

.navBar #navTitre { /* Titre centré dans la barre */
    font-size: 50px !important;
    padding-left: 7%;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 5px;
}

.navBar #navAutre,
.navBar #navDeconnexion { /* Zones à gauche et droite de la nav */
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 5px;
}

#navAutre { /* Bouton réglage (à gauche) */
    width: 30px;
    height: 30px;
    background-color: #77B5FE;
    border-radius: 50%;
}

#navAutre img { /* Image bouton réglage */
    width: 15px;
    margin: 1%;
    cursor: pointer;
    transition: transform 0.2s ease;
}

#navAutre img:hover { transform: scale(1.3); } /* Zoom au survol */

#navDeconnexion a { color: inherit; } /* Liens même couleur */

#navDeconnexion a:hover { text-decoration: underline; } /* Surlignage au survol */

/* ------------------------ SELECTION + ACTIONS ------------------------ */
#divSelect { /* Colonne gauche contenant les sélections */
    width: 20vw;
    height: 80vh;
    float: left;
    transform: translate(3vw, 5vh);
}

#divSelect h3 { font-size: 15px; } /* Titres des selecteurs */

#actionGraphique { /* Zone de titre du graphique + boutons */
    background-color: #F5F2F0;
    margin-bottom: 5px;
    padding: 2%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-radius: 5px;
}

#graphique h2 { font-size: 18px; } /* Titre du graphique */

#actions { /* Zone des icônes + et - */
    width: 40px;
    display: flex;
    align-items: center;
}

#actions img { /* Icônes ajout/suppression */
    width: 15px;
    cursor: pointer;
    transition: transform 0.2s ease;
}

#actions #ajoutCourbe { margin-right: 10px; } /* Espacement bouton + */

#actions img:hover { transform: scale(1.5); } /* Zoom au survol */

/* ------------------------ SELECTEURS GRAPHIQUE ------------------------ */
#selectGraphique { /* Conteneur des listes déroulantes */
    height: 45%;
    margin-bottom: 10px;
    border-radius: 5px;
    background-color: #F5F2F0;
    padding: 1% 0 0 10%;
}

#selectGraphique > div { /* Style commun aux blocs de sélection */
    width: 96%;
    height: 22%;
    margin: 2%;
    font-size: 20px;
    border-radius: 5px;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
}

#selectGraphique select {
    width: 80%;
    height: 50%;
    border-radius: 5px;
    cursor: pointer;
}

/* ------------------------ PLAGE TEMPORELLE + INFOS ------------------------ */
#selectPlage { /* Bloc bouton plage temporelle */
    width: 100%;
    height: 14%;
    margin-bottom: 10px;
    background-color: #F5F2F0;
    padding: 2%;
    border-radius: 5px;
    display: flex;
    justify-content: center;
    align-items: center;
}

#selectPlage button { /* Bouton plage temporelle */
    width: 75%;
    height: 75%;
    border-radius: 25px;
    font-size: 18px;
    border: none;
    cursor: pointer;
    transition: transform 0.2s ease;
}

#selectPlage button:hover { transform: scale(1.05); }

#selectPlage > button { margin: 0 auto; } /* Centrage */

#infoGraphique { /* Zone d’information sous les selects */
    background-color: #F5F2F0;
    border-radius: 10px;
    padding: 2%;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

/* ------------------------ MODAL : Plage Temporelle ------------------------ */
#model, .model { /* Modale générique */
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px;
    border: 1px solid black;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    z-index: 10001;
}

#model-content { /* Contenu de la modale */
    display: flex;
    flex-direction: column;
    gap: 10px;
}

#model input {
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

#model button,
.model button {
    padding: 8px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

/* ------------------------ MODALE AJOUT COURBE ------------------------ */
#ajoutCourbeDiv { /* Modale d’ajout d’un graphique */
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 23vw;
    height: auto;
    background-color: #F5F2F0;
    border-radius: 10px;
    padding: 2%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    gap: 15px;
    z-index: 9999;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.35);
    overflow-y: auto;
}

#ajoutCourbeDiv h3 { font-size: 15px; margin-bottom: 5px; }

#ajoutCourbeDiv > div {
    width: 96%;
    display: flex;
    flex-direction: column;
    margin-bottom: 10px;
    align-items: center;
}

#ajoutCourbeDiv select {
    width: 80%;
    height: 40px;
    border-radius: 5px;
    border: 1px solid #ccc;
    cursor: pointer;
    font-size: 14px;
    padding: 5px;
    align-self: center;
    text-align: center;
}

#ajoutCourbeDiv button {
    width: 75%;
    height: 45px;
    font-size: 18px;
    border-radius: 25px;
    border: none;
    cursor: pointer;
    transition: transform 0.2s ease;
    align-self: center;
    text-align: center;
    justify-content: center;
}

#ajoutCourbeDiv input,
#ajoutCourbeDiv label {
    align-self: center;
    text-align: center;
}

#ajoutCourbeDiv button:hover { transform: scale(1.05); }

#ajoutCourbeDiv .close {
    align-self: flex-end;
    cursor: pointer;
    font-size: 24px;
    font-weight: bold;
    color: #aaa;
    margin-bottom: 10px;
}

#ajoutCourbeDiv .close:hover { color: black; }

/* Champs de plage temporelle */
.selectPlage label {
    width: auto;
    min-width: 50px;
    font-size: 14px;
}

.selectPlage input {
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

#selectPlage > label,
#selectPlage > input {
    display: inline-block;
    margin-bottom: 10px;
    vertical-align: middle;
}

#selectPlage {
    flex-direction: column;
    align-items: flex-start;
    padding: 2%;
    display: flex;
    gap: 10px;
}

.lignePlage {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
}

.lignePlage label {
    min-width: 90px;
    font-size: 14px;
    text-align: right;
}

.lignePlage input {
    flex: 1;
    min-width: 150px;
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
    text-align: center;
}

/* ------------------------ GRAPHIQUE PRINCIPAL ------------------------ */
#divGraphiques {
    width: 71vw;
    height: 80vh;
    float: right;
    transform: translate(-3vw, 5vh);
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    align-items: stretch;
}

.graphiqueBloc {
    flex: 1 1 100%;
    max-width: 100%;
    height: auto;
    background-color: #F5F2F0;
    border-radius: 10px;
    transition: all 0.3s ease-in-out;
    position: relative;
}

#monGraphique {
    display: block;
    width: 95%;
    height: 95%;
    margin: 5px 0 0 5px;
    max-width: 95%;
    max-height: 95%;
}

.graphiquePlein { flex: 1 1 100%; max-width: 100%; }

.graphiqueMoitié {
    flex: 1 1 calc(50% - 10px);
    max-width: calc(50% - 10px);
}

.graphiqueBloc img {
    width: 15px;
    float: right;
    margin: 1%;
    cursor: pointer;
    transition: transform 0.2s ease;
}

.graphiqueBloc img:hover { transform: scale(1.3); }

.img-export {
    width: 15px;
    cursor: pointer;
    transition: transform 0.2s ease;
    position: absolute;
    top: 10px;
    right: 10px;
}

.img-export:hover { transform: scale(1.3); }

#telechargeCourbe {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 15px;
    cursor: pointer;
    transition: transform 0.2s ease;
}

#telechargeCourbe:hover { transform: scale(1.3); }

.graphiqueSecondaire {
    flex: 1 1 calc(50% - 10px);
    max-width: calc(50% - 10px);
    aspect-ratio: 4 / 3;
    background-color: #F5F2F0;
    border-radius: 10px;
    padding: 1%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: stretch;
    position: relative;
}

.graphiqueSecondaire canvas {
    width: 95% !important;
    height: 95% !important;
    max-width: 95%;
    max-height: 95%;
    margin: 5px 0 0 5px;
    display: block;
}

#divGraphiques .graphiqueSecondaire { display: flex !important; }

/* ------------------------ DIVERS ------------------------ */
.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

button {
    background-color: #007bff;
    color: #ffffff;
    transition: background-color 0.3s, color 0.3s;
}

button:hover { background-color: #0056b3; }

/* ------------------------ RESPONSIVE ------------------------ */
@media (max-width: 900px) {
    #divSelect {
        width: 100%;
        height: auto;
        float: none;
        transform: none;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: flex-start;
    }

    #divSelect > div {
        width: 90%;
        margin-bottom: 15px;
    }

    #actionGraphique {
        flex-direction: row;
        justify-content: space-between;
    }

    #actions {
        flex-direction: row;
        gap: 5px;
    }

    #divGraphiques {
        width: 100%;
        float: none;
        transform: none;
        padding: 10px;
        justify-content: center;
    }

    #Graphique {
        width: 95%;
        height: auto;
    }

    .navBar {
        flex-direction: column;
        height: auto;
        padding: 15px;
        gap: 10px;
    }

    #navTitre {
        font-size: 30px !important;
        padding-left: 0;
    }

    #ajoutCourbeDiv,
    #model,
    .model {
        width: 90vw;
        height: auto;
        max-height: 90vh;
        overflow-y: auto;
    }

    #Graphique.graphiqueMoitié {
        flex: 1 1 100% !important;
        max-width: 100% !important;
    }
}

@media (max-width: 600px) {
    #divSelect h3,
    #graphique h2 {
        font-size: 14px;
    }

    select,
    button {
        font-size: 14px;
        width: 100%;
    }

    .navBar {
        font-size: 12px;
    }

    #telechargeCourbe {
        width: 20px;
    }

    .img-export {
        width: 15px;
    }
}

/* ------------------------ MODE SOMBRE ------------------------ */
body.dark-mode {
    background-color: #0f032e;
    color: #f0f0f0;
}

body.dark-mode .navBar {
    background-color: #090120;
    color: #f0f0f0;
}

body.dark-mode #navAutre { background-color: #090120; }

body.dark-mode #divSelect { background-color: #0f032e; }

body.dark-mode select,
body.dark-mode input {
    background-color: #090120;
    color: #f0f0f0;
    border: 1px solid #555;
}

body.dark-mode button { background-color: #007bff; }

body.dark-mode button:hover { background-color: #0056b3; }

body.dark-mode #selectGraphique,
body.dark-mode .graphiqueBloc,
body.dark-mode #infoGraphique,
body.dark-mode .model {
    background-color: #090120;
}

body.dark-mode img {
    filter: invert(1) brightness(1.2);
}

#modeIcon {
    width: 20px;
    height: 20px;
    margin-left: 10px;
    cursor: pointer;
    transition: transform 0.3s ease;
}

#modeIcon:hover { transform: rotate(20deg); }

body.dark-mode #actionGraphique,
body.dark-mode #selectPlage {
    background-color: #090120;
}

.modal.dark-mode {
    background-color: #090120;
    color: #f0f0f0;
}

.modal.dark-mode label,
.modal.dark-mode h2 {
    color: #f0f0f0;
}

.modal.dark-mode select,
.modal.dark-mode input {
    background-color: #090120;
    color: #f0f0f0;
    border: 1px solid #555;
}

.modal.dark-mode button {
    background-color: #444;
    color: #fff;
    border: 1px solid #666;
}

.modal.dark-mode button:hover {
    background-color: #666;
}

.model { z-index: 10001; }

#suppressionCourbeDiv { z-index: 11000; }
"

Log.css :

"body {
    height: 100vh;
    margin: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-family: Arial, sans-serif;
    background: linear-gradient(to bottom, #87CEEB, #4682B4);
    padding: 20px;
    box-sizing: border-box;
}

h2 {
    text-align: center;
    margin-bottom: 20px;
}

.container {
    text-align: center;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 450px;
}

form {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
}

input[type="text"],
input[type="password"] {
    padding: 10px;
    margin: 5px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
    width: 100%;
    max-width: 300px;
    box-sizing: border-box;
}

input[type="submit"] {
    padding: 10px 20px;
    margin-top: 10px;
    border: none;
    background-color: #007BFF;
    color: white;
    border-radius: 5px;
    cursor: pointer;
    width: 100%;
    max-width: 300px;
}

input[type="submit"]:hover {
    background-color: #0056b3;
}
/*------------------------------------------------------*/
.cloud {
    position: absolute;
    width: 100px;
    height: 60px;
    background: white;
    border-radius: 50px;
    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.1);
    animation: float 6s infinite alternate ease-in-out;
    z-index: -1;
}

.cloud::before, .cloud::after {
    content: "";
    position: absolute;
    background: white;
    border-radius: 50%;
}

.cloud::before {
    width: 70px;
    height: 70px;
    top: -35px;
    left: 10px;
}

.cloud::after {
    width: 50px;
    height: 50px;
    top: -25px;
    right: 10px;
}

@keyframes float {
    0% { transform: translateX(-30px); }
    100% { transform: translateX(30px); }
}"

Parametrage.css :

"/* Réinitialisation de base pour tous les éléments */
* {
    margin: 0; /* Supprime les marges */
    padding: 0; /* Supprime les paddings */
    text-decoration: none; /* Supprime les soulignements */
    list-style: none; /* Supprime les puces des listes */
    box-sizing: border-box; /* Inclut padding et border dans la taille */
    font-family: calibri; /* Police par défaut */
}

body {
    min-width: 100px; /* Largeur minimale */
    min-height: 100px; /* Hauteur minimale */
    background: #ffffff; /* Fond blanc */
}

/*-------------------------------- NAVBAR --------------------------------*/

.navBar {
    width: 100%; /* Prend toute la largeur */
    height: 10vh; /* Hauteur relative */
    min-height: 77px; /* Hauteur minimale */
    padding: 35px 35px; /* Espace intérieur */
    display: flex; /* Alignement flex */
    align-items: center; 
    justify-content: space-between; 
    font-size: 15px;
    background-color: #77B5FE; /* Bleu clair */
}

.navBar #navAutre {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%; /* Rond */
    width: 30px;
    height: 30px;
    background-color: #77B5FE; /* Même couleur que la barre */
}

.navBar #navAutre img{
    transition: transform 0.2s ease; /* Animation zoom */
}

.navBar #navAutre img:hover{
    transform: scale(1.3); /* Zoom au survol */
}

.navBar #navAutre a {
    text-decoration: none;
    color: inherit; /* Hérite de la couleur de texte */
}

.navBar #navAutre img{
    margin: 1% 1% 0;
    width: 15px;
    height: 15px;
    cursor: pointer;
    float: left;
}

.navBar #navTitre {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center; 
    font-size: 50px !important;
    border-radius: 5px;
    padding-left: 7%;
}

.navBar #navDeconnexion {
    border-radius: 5px;
}

/*-------------------------------- CONTENEUR PRINCIPAL --------------------------------*/

.container {
   display: flex; /* Organisation principale */
   justify-content: flex-start;
   height: 90vh;
}

.container .selectionTable {
    flex: 0 0 auto;
    width: 10vw;
    height: 100%;
    padding: 25px 10px;
    float: left;
    align-items: center;
    text-align: center;
    justify-content: center;
    background-color: #F5F2F0;
    border-radius: 5px;
}

.container .selectionTable button {
    width: 75%;
    min-width: 25px;
    height: 35px;
    min-height: 15px;
    max-height: 50px;
    margin-bottom: 15px;
    border: none;
    border-radius: 5px;
    background-color: #007BFF; /* Bleu vif */
    cursor: pointer;
    color: white;
}

.container .selectionTable button:hover {
    background-color: #0056b3; /* Bleu foncé au survol */
    transform: scale(1.1);
}

.container .selectionTable button.active {
    background-color: #0056b3;
    transform: scale(1.1);
    color: white;
}

.container .tabParametrage {
    width: 90vw;
    padding: 25px;
    background: #ffffff;
}

.container .tabParametrage .divTableau {
    width: 100%;
    height: 100%;
    flex: 1;
    border-radius: 15px;
    background-color: #F5F2F0;
}

/*----------- En-tête tableau + recherche -----------*/
.container .tabParametrage .divTableau #enteteTab {
    padding: 2px;
    height: 5%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-left: 20px;
}

.container .tabParametrage .divTableau #enteteTab #recherche {
    width: 12%;
    height: 85%;
    float: right;
    border: solid 1px;
    border-radius: 15px;
    padding: 2px;
    background-color: #77B5FE;
    display: flex;
    align-items: center;
}

.container .tabParametrage .divTableau #enteteTab #recherche #imgRecherche{
    width: 10%;
    height: 100%;
    margin-left: 5px;
}

.container .tabParametrage .divTableau #enteteTab #recherche #searchInput {
    width: 84%;
    height: 100%;
    float: right;
    border: none;
    margin-left: 2px;
    border-radius:  0 15px 15px 0;
    padding: 5px;
    background-color: #77B5FE;
    color: black;
}

.container .tabParametrage .divTableau #enteteTab #recherche #searchInput:focus {
    outline: none;
}

/*----------- Conteneur tableau -----------*/
.container .tabParametrage .divTableau #tab {
    width: 100%;
    height: 95%;
    border-radius: 0 0 15px 15px;
    overflow-y: auto;
    overflow-x: auto;
}

.container .tabParametrage .divTableau #tab table {
    border-collapse: collapse;
    width: 100%;
    height: 100%;
    table-layout: fixed;
    border-radius: 15px;
}

/*----------- Styles colonnes -----------*/
.container .tabParametrage .divTableau #tab th, .divTableau #tab thead td {
    border: 1px solid #ffffff;
}

.container .tabParametrage .divTableau #tab thead th {
    position: sticky;
    top: 0;
    background-color: rgb(206, 206, 206);
    z-index: 2;
}

.container .tabParametrage .divTableau #tab thead tr {
    height: 40px;
}

.container .tabParametrage .divTableau #tab tbody tr {
    width: 100%;
    height: 75px;
}

.container .tabParametrage .divTableau #tab th,
.container .tabParametrage .divTableau #tab td {
    border: 1px solid #ddd;
    padding: 5px;
    text-align: left;
    word-break: break-word;
}

.container .tabParametrage .divTableau #tab tbody tr:nth-child(even) {
    background-color: #e4e4e4; /* Alternance de lignes */
}

/* Largeurs spécifiques pour colonnes */
.tabParametrage th:nth-child(1) { width: 250px; }
.tabParametrage th:nth-child(2) { width: 85px; }

.container .tabParametrage .divTableau #tab th.actions,
.container .tabParametrage .divTableau #tab td.actions { width: 90px !important; }

.container .tabParametrage .divTableau #tab th.nom,
.container .tabParametrage .divTableau #tab td.nom,
.container .tabParametrage .divTableau #tab th.nomcarte,
.container .tabParametrage .divTableau #tab td.nomcarte,
.container .tabParametrage .divTableau #tab th.nomchapelle,
.container .tabParametrage .divTableau #tab td.nomchapelle {
    width: 150px !important;
}

.container .tabParametrage .divTableau #tab th.marque,
.container .tabParametrage .divTableau #tab td.marque,
.container .tabParametrage .divTableau #tab th.reference,
.container .tabParametrage .divTableau #tab td.reference,
.container .tabParametrage .divTableau #tab th.numserie,
.container .tabParametrage .divTableau #tab td.numserie {
    width: 100px !important;
}

.container .tabParametrage .divTableau #tab th.datemiseenservice,
.container .tabParametrage .divTableau #tab td.datemiseenservice {
    width: 150px !important;
}

.container .tabParametrage .divTableau #tab th.commentaire,
.container .tabParametrage .divTableau #tab td.commentaire {
    width: 350px !important;
}

.container .tabParametrage .divTableau #tab th.seuilmax,
.container .tabParametrage .divTableau #tab td.seuilmax,
.container .tabParametrage .divTableau #tab th.seuilmin,
.container .tabParametrage .divTableau #tab td.seuilmin {
    width: 75px !important;
}

.container .tabParametrage .divTableau #tab th.etatcomposant,
.container .tabParametrage .divTableau #tab td.etatcomposant,
.container .tabParametrage .divTableau #tab th.grandeurcapt,
.container .tabParametrage .divTableau #tab td.grandeurcapt {
    width: 120px !important;
}

.container .tabParametrage .divTableau #tab th.unite,
.container .tabParametrage .divTableau #tab td.unite {
    width: 75px !important;
}

.container .tabParametrage .divTableau #tab th.appkey,
.container .tabParametrage .divTableau #tab td.appkey,
.container .tabParametrage .divTableau #tab th.appeui,
.container .tabParametrage .divTableau #tab td.appeui {
    width: 150px !important;
}

/*------------- Icônes Actions -------------*/
.addImage, .modifierImage, .deleteImage {
    width: 20px;
    height: 20px;
    vertical-align: middle;
    transition: transform 0.2s ease;
    margin-left: 5px;
}

.addImage:hover, .modifierImage:hover, .deleteImage:hover {
    transform: scale(1.3);
}

/*------------- Modale Générique -------------*/
.modal {
    display: none;
    position: fixed;
    z-index: 999;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal-form {
    background-color: #fff;
    padding: 20px 30px;
    border-radius: 8px;
    max-width: 25vw;
    min-width: 300px;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.modal-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 15px;
}

.modal-form input[type="text"],
.modal-form select {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.modal-title-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-close {
    background: none;
    border: none;
    font-size: 30px;
    color: #888;
    transition: transform 0.2s ease;
    cursor: pointer;
}

.modal-close:hover {
    color: #000;
    transform: scale(1.2);
}

#modalOverlay {
    border: 20px solid black; /* Encadrement */
}

/*-------------------------------- RESPONSIVE --------------------------------*/

@media (max-width: 900px) {
    .navBar {
        flex-direction: column;
        height: auto;
        padding: 15px;
        gap: 10px;
        align-items: center;
        text-align: center;
    }

    .navBar #navTitre {
        font-size: 30px !important;
        padding-left: 0;
    }

    .container {
        flex-direction: column;
        height: auto;
    }

    .container .selectionTable {
        width: 100%;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
        align-items: center;
    }

    .container .selectionTable button {
        width: 40%;
        max-width: 200px;
    }

    .container .tabParametrage {
        width: 100%;
        padding: 15px;
    }

    .modal-form {
        width: 90vw;
        max-width: none;
        min-width: 0;
    }

    .modal-buttons {
        flex-direction: column;
        gap: 10px;
    }
}

@media (max-width: 600px) {
    .navBar {
        font-size: 12px;
    }

    .navBar #navTitre {
        font-size: 24px !important;
    }

    .container .selectionTable button {
        width: 80%;
    }

    .modal-form input[type="text"],
    .modal-form select {
        font-size: 14px;
    }

    .modal-close {
        font-size: 24px;
    }
}"