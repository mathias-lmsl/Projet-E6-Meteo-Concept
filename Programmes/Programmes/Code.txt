connectDB.php :

<?php

$login = 'administrateur';
$pass = 'Admin';
// $login = 'root';
// $pass = '';

// try {
//     $bdd = new PDO('mysql:host=localhost;dbname=meteoconcept;charset=utf8', $login, $pass);
// } catch (Exception $e) {
//     die('Erreur : connexion à la base de données impossible ' . $e->getMessage());
// }

try {
    $bdd = new PDO('mysql:host=192.168.1.205;dbname=meteoconcept;charset=utf8', $login, $pass);
    $bdd->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die('Erreur : connexion à la base de données impossible ' . $e->getMessage());
}
?>

connectLog.php :

<?php
$login = 'log';
$pass = 'Log';
// $login = 'root';
// $pass = '';

// try {
//     $bdd = new PDO('mysql:host=localhost;dbname=meteoconcept;charset=utf8', $login, $pass);
//     $bdd->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
// } catch (PDOException $e) {
//     die('Erreur : connexion à la base de données impossible ' . $e->getMessage());
// }

try {
    $bdd = new PDO('mysql:host=192.168.1.205;dbname=meteoconcept;charset=utf8', $login, $pass);
    $bdd->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die('Erreur : connexion à la base de données impossible ' . $e->getMessage());
}
?>

Log.php :

<?php
session_start();
require "connectLog.php";

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $Nom = trim($_POST["Nom"]);
    $Mdp = $_POST["Mdp"]; // Ne pas trim le mot de passe avant le hashage

    // Requête préparée pour éviter les injections SQL
    $req = $bdd->prepare("SELECT Mdp FROM utilisateur WHERE Login = :nom");
    $req->bindParam(':nom', $Nom, PDO::PARAM_STR);
    $req->execute();
    $reponse = $req->fetch();

    if ($reponse) {
        if (password_verify($Mdp, $reponse['Mdp'])) { // Vérification du mot de passe hashé
            $_SESSION['login'] = $Nom;
            header('Location: Consultation.php');
            exit();
        } else {
            $message = "Mot de passe invalide !";
        }
    } else {
        $message = "Nom d'utilisateur non trouvé !";
    }
}
?>

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Connexion</title>
    <link href="../css/Log.css" rel="stylesheet" type="text/css">
</head>
<body>
<div class="cloud" style="top: 20%; left: 10%;"></div>
    <div class="cloud" style="top: 40%; right: 15%; animation-delay: 0s;"></div>
    <div class="cloud" style="top: 60%; left: 20%; animation-delay: 0s;"></div>
    <div class="container">
        <h2>Se connecter</h2>
        <form action="" method="POST">
            <input type="text" name="Nom" placeholder="Nom d'utilisateur" required>
            <input type="password" name="Mdp" placeholder="Mot de passe" required>
            </br></br>
            <input type="submit" value="Connexion">
        </form>

        <?php if (!empty($message)): ?>
            <div class="message"><?php echo htmlspecialchars($message); ?></div>
        <?php endif; ?>
    </div>
</body>
</html>

Consultation.php :

<?php
session_start();
require "connectDB.php";

if (!isset($_SESSION['login'])) {
    header('Location: Log.php');
    exit;
}

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['Deconnexion'])) {
    session_destroy();
    header('Location: Log.php');
    exit;
}

try {
    $req = $bdd->prepare("SELECT Prenom, Nom FROM utilisateur WHERE Login = :username");
    $req->execute([':username' => $_SESSION['login']]);
    $user = $req->fetch(PDO::FETCH_ASSOC);

    if ($user) {
        $prenom = $user['Prenom'];
        $nom = $user['Nom'];
    } else {
        error_log("Utilisateur non trouvé : " . $_SESSION['login']);
    }
} catch (PDOException $e) {
    die("Erreur lors de la récupération des informations utilisateur : " . $e->getMessage());
}


?>

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Consultation des Mesures</title> 
    <link href="../css/Consultation.css" rel="stylesheet" type="text/css"> 
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <header class="navBar">
        <div id="navAutre">
            <a href="Parametrage.php">
                <img src="../img/reglage.svg" alt="plus non trouvé" id="reglage" title="Parametrage du système">
            </a>
        </div>
        <div id="navTitre">
            Consultation des mesures
        </div>
        <div id="navDeconnexion">
            <?php echo $prenom . ' ' . $nom . ' | '; ?>
            <a href="Log.php">Déconnexion</a>
        </div>
    </header>

    <div id="divSelect">
        <div id="actionGraphique">
            <div id="graphique">
                <h2>Graphique n°1</h2>
            </div>
            <div id="actions">
                <img src="../img/plus.svg" alt="plus non trouvé" id="ajoutCourbe" title="Ajouter un graphique">
                <img src="../img/moins.svg" alt="moins non trouvé" id="supprimerCourbe" title="Supprimer un graphique">
            </div>
        </div>
        <div id="selectGraphique">
            <div id="selectSerre">
                <h3>Selection serre :</h3>
                <select name="lstSerre" id="lstSerre" data-url="getChapelles.php">
                    <option value="" selected>-- Sélectionner une serre --</option>
                    <?php include 'getSerres.php'; ?>
                </select>
            </div>

            <div id="selectChapelle">
                <h3>Selection chapelle :</h3>
                <select name="lstChapelle" id="lstChapelle" data-url="getCartes.php" disabled>
                    <option value="">-- Sélectionner une chapelle --</option>
                </select>
            </div>

            <div id="selectCarte">
                <h3>Selection carte :</h3>
                <select name="lstCarte" id="lstCarte" data-url="getCapteurs.php" disabled>
                    <option value="">-- Sélectionner une carte --</option>
                </select>
            </div>

            <div id="selectCapteur">
                <h3>Selection capteur :</h3>
                <select name="lstCapteur" id="lstCapteur" disabled>
                    <option value="">-- Sélectionner un capteur --</option>
                </select>
            </div>
        </div> 

        <div id="actionGraphique">
            <div id="graphique">
                <h2>Graphique n°2 (optionnel)</h2>
            </div>
        </div>

        <div id="selectGraphique">
            <div id="selectSerre">
                <h3>Selection serre :</h3>
                <select name="lstSerre2" id="lstSerre2" data-url="getChapelles.php">
                    <option value="" selected>-- Sélectionner une serre --</option>
                    <?php include 'getSerres.php'; ?>
                </select>
            </div>

            <div id="selectChapelle">
                <h3>Selection chapelle :</h3>
                <select name="lstChapelle2" id="lstChapelle2" data-url="getCartes.php" disabled>
                    <option value="">-- Sélectionner une chapelle --</option>
                </select>
            </div>

            <div id="selectCarte">
                <h3>Selection carte :</h3>
                <select name="lstCarte2" id="lstCarte2" data-url="getCapteurs.php" disabled>
                    <option value="">-- Sélectionner une carte --</option>
                </select>
            </div>

            <div id="selectCapteur">
                <h3>Selection capteur :</h3>
                <select name="lstCapteur2" id="lstCapteur2" disabled>
                    <option value="">-- Sélectionner un capteur --</option>
                </select>
            </div>
        </div> 

        <div id="selectPlage">
            <button onclick="ouvertureModel()">Plage temporelle</button>
        </div>

        <div id="ajoutCourbeDiv" class="model" style="display: none;">
            <span class="close" id="closeAjoutCourbe">&times;</span>
            <div id="selectSerre">
                <h3>Selection serre :</h3>
                <select name="lstSerreAjout" id="lstSerreAjout" data-url="getChapelles.php">
                    <option value="" selected>-- Sélectionner une serre --</option>
                    <?php include 'getSerres.php'; ?>
                </select>
            </div>

            <div id="selectChapelle">
                <h3>Selection chapelle :</h3>
                <select name="lstChapelleAjout" id="lstChapelleAjout" data-url="getCartes.php" disabled>
                    <option value="">-- Sélectionner une chapelle --</option>
                </select>
            </div>

            <div id="selectCarte">
                <h3>Selection carte :</h3>
                <select name="lstCarteAjout" id="lstCarteAjout" data-url="getCapteurs.php" disabled>
                    <option value="">-- Sélectionner une carte --</option>
                </select>
            </div>

            <div id="selectCapteur">
                <h3>Selection capteur :</h3>
                <select name="lstCapteurAjout" id="lstCapteurAjout" disabled>
                    <option value="">-- Sélectionner un capteur --</option>
                </select>
            </div>
            <button id="validerAjoutCourbe">Valider</button>
        </div>
    </div> 

    <div id="ajoutCourbeDiv" style="display: none;">
        <div id="selectSerre">
            <h3>Selection serre :</h3>
            <select name="lstSerreAjout" id="lstSerreAjout" data-url="getChapelles.php">
                <option value="" selected>-- Sélectionner une serre --</option>
                <?php include 'getSerres.php'; ?>
            </select>
        </div>

        <div id="selectChapelle">
            <h3>Selection chapelle :</h3>
            <select name="lstChapelleAjout" id="lstChapelleAjout" data-url="getCartes.php" disabled>
                <option value="">-- Sélectionner une chapelle --</option>
            </select>
        </div>

        <div id="selectCarte">
            <h3>Selection carte :</h3>
            <select name="lstCarteAjout" id="lstCarteAjout" data-url="getCapteurs.php" disabled>
                <option value="">-- Sélectionner une carte --</option>
            </select>
        </div>

        <div id="selectCapteur">
            <h3>Selection capteur :</h3>
            <select name="lstCapteurAjout" id="lstCapteurAjout" disabled>
                <option value="">-- Sélectionner un capteur --</option>
            </select>
        </div>

        <div id="selectPlage">
            <button onclick="ouvertureModelAjout()">Plage temporelle</button>
        </div>
    </div>

    <div id="model">
        <span class="close" id="closePlage">&times;</span>
        <label for="startDate">Date de début :</label>
        <input type="date" id="startDate">
        <label for="startTime">Heure de début :</label>
        <input type="time" id="startTime" required>
        <br><br>
        <label for="endDate">Date de fin :</label>
        <input type="date" id="endDate">
        <label for="endTime">Heure de fin :</label>
        <input type="time" id="endTime" required>
        <br><br>
        <button onclick="updateChartWithTimeRange()">Valider</button>
    </div>

    <div id="divGraphiques">
        <div id="Graphique">
            <img src="../img/download.svg" alt="moins non trouvé" id="telechargeCourbe" title="Export CSV">
            <canvas id="monGraphique"></canvas>
            <canvas id="monGraphique2"></canvas>
        </div>
        <div id="infoGraphique">
            <span>Actuelle : ...</span>
            <span>Minimum : ...</span>
            <span>Maximum : ...</span>
            <span>Moyenne : ...</span>
        </div>
    </div>
    <script src="../js/Consultation.js"></script>
</body>
</html>

Parametrage.php :

<?php
session_start();
require "connectDB.php";

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['Deconnexion'])) {
    session_destroy();
    header('Location: Log.php');
    exit;
}

function getColumnNames($bdd, $tableName) {
    $stmt = $bdd->prepare("DESCRIBE " . $tableName);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_COLUMN);
}

try {
    $req = $bdd->prepare("SELECT Prenom, Nom FROM utilisateur WHERE Login = :username");
    $req->execute([':username' => $_SESSION['login']]);
    $user = $req->fetch(PDO::FETCH_ASSOC);

    if ($user) {
        $prenom = $user['Prenom'];
        $nom = $user['Nom'];
    } else {
        error_log("Utilisateur non trouvé : " . $_SESSION['login']);
    }
} catch (PDOException $e) {
    die("Erreur lors de la récupération des informations utilisateur : " . $e->getMessage());
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parametrage du système</title>
    <link href="../css/Parametrage.css" rel="stylesheet" type="text/css"> 
</head>
<body>
    <header class="navBar">
        <div id="navAutre">
            <a href="Consultation.php">
                <img src="../img/graphe.svg" alt="plus non trouvé" id="graphe" title="Consultation des mesures">
            </a>
        </div>
        <div id="navTitre">Paramétrage du système</div>
        <div id="navDeconnexion">
            <?php echo $prenom . ' ' . $nom . ' | '; ?>
            <a href="Log.php">Déconnexion</a>
        </div>
    </header>
    <div class="container">
        <div class="selectionTable">
            <button id="selectSerre">Serres</button>
            <button id="selectChapelle">Chapelles</button>
            <button id="selectCarte">Cartes</button>
            <button id="selectCapteur">Capteurs</button>
            <button id="selectUtilisateur">Utilisateurs</button>
        </div>
        <div class="tabParametrage">
            <div class="divTableau">
                <div id="enteteTab">
                    <h2>Test</h2>
                    <div id="recherche">
                        <img src="../img/recherche.svg" alt="recherche non trouvé" id="imgRecherche" title="Recherche">
                        <input type="text" id="searchInput" placeholder="Rechercher...">
                    </div>
                </div>
                <div id="tab">
                    <table>
                        <thead>
                            <tr>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <script src="../js/Parametrage.js"></script>
</body>
</html>

getCapteurId.php :

<?php
require "connectDB.php";

if (isset($_GET['grandeur'])) {
    $grandeur = $_GET['grandeur'];
    try {
        $stmt = $bdd->prepare("SELECT IdCapteur FROM capteur WHERE GrandeurCapt = ?");
        $stmt->execute([$grandeur]);
        $capteurInfo = $stmt->fetch(PDO::FETCH_ASSOC);
        echo json_encode($capteurInfo);
    } catch (PDOException $e) {
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>

getCapteurInfo.php :

<?php
require "connectDB.php";

if (isset($_GET['capteur_id'])) {
    $capteurId = $_GET['capteur_id'];
    try {
        $stmt = $bdd->prepare("SELECT GrandeurCapt, Unite FROM grandeur WHERE GrandeurCapt = (SELECT GrandeurCapt FROM capteur WHERE IdCapteur = ?)");
        $stmt->execute([$capteurId]);
        $capteurInfo = $stmt->fetch(PDO::FETCH_ASSOC);
        echo json_encode($capteurInfo);
    } catch (PDOException $e) {
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>

getCapteurs.php :

<?php
require "connectDB.php";

if (isset($_GET['carte_id'])) {
    $carteId = $_GET['carte_id'];
    try {
        $stmt = $bdd->prepare("SELECT ca.IdCapteur, ca.Nom FROM capteur ca JOIN possede po ON ca.IdCapteur = po.IdCapteur WHERE po.IdCarte = ?");
        $stmt->execute([$carteId]);
        $capteurs = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($capteurs);
    } catch (PDOException $e) {
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>

getCartes.php :

<?php
require "connectDB.php";

if (isset($_GET['chapelle_id'])) {
    $chapelleId = $_GET['chapelle_id'];
    try {
        $stmt = $bdd->prepare("SELECT IdCarte, Nom FROM carte WHERE IdChapelle = ?");
        $stmt->execute([$chapelleId]);
        $cartes = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($cartes);
    } catch (PDOException $e) {
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>

getChapelles.php :

<?php
require "connectDB.php";

if (isset($_GET['serre_id'])) {
    $serreId = $_GET['serre_id'];
    try {
        $stmt = $bdd->prepare("SELECT IdChapelle, Nom FROM chapelle WHERE IdSerre = ?");
        $stmt->execute([$serreId]);
        $chapelles = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($chapelles);
    } catch (PDOException $e) {
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>

getMesures.php :

<?php
require "connectDB.php";

if (isset($_GET['capteur_id'])) {
    $capteurId = $_GET['capteur_id'];
    $startDate = isset($_GET['startDate']) ? $_GET['startDate'] : null;
    $startTime = isset($_GET['startTime']) ? $_GET['startTime'] : null;
    $endDate = isset($_GET['endDate']) ? $_GET['endDate'] : null;
    $endTime = isset($_GET['endTime']) ? $_GET['endTime'] : null;

    try {
        $sql = "SELECT Horodatage, Valeur FROM mesure WHERE IdCapteur = ?";
        $params = [$capteurId];

        if ($startDate && $startTime && $endDate && $endTime) {
            $startDateTime = $startDate . ' ' . $startTime;
            $endDateTime = $endDate . ' ' . $endTime;
            $sql .= " AND Horodatage BETWEEN ? AND ?";
            $params[] = $startDateTime;
            $params[] = $endDateTime;
        }

        $sql .= " ORDER BY Horodatage ASC";

        $stmt = $bdd->prepare($sql);
        $stmt->execute($params);
        $mesures = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($mesures);
    } catch (PDOException $e) {
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>

getSelectOptions.php :

<?php
require "connectDB.php";

try {
    $options = [];

    // Etats composants
    $stmt = $bdd->query("
        SELECT DISTINCT EtatComposant FROM carte
        UNION
        SELECT DISTINCT EtatComposant FROM capteur
    ");
    $options['EtatComposant'] = $stmt->fetchAll(PDO::FETCH_COLUMN);

    // Grandeur capteurs
    $stmt = $bdd->query("SELECT DISTINCT GrandeurCapt FROM capteur");
    $options['GrandeurCapt'] = $stmt->fetchAll(PDO::FETCH_COLUMN);

    // ➕ Unités capteurs
    $stmt = $bdd->query("SELECT DISTINCT Unite FROM capteur WHERE Unite IS NOT NULL");
    $options['Unite'] = $stmt->fetchAll(PDO::FETCH_COLUMN);

    // ➕ Cartes
    $stmt = $bdd->query("SELECT IdCarte, Nom FROM carte");
    $options['Cartes'] = $stmt->fetchAll(PDO::FETCH_ASSOC);

    echo json_encode($options);

} catch (PDOException $e) {
    echo json_encode(['error' => $e->getMessage()]);
}
?>

getSerres.php :

<?php
require "connectDB.php";

try {
    $stmtSerre = $bdd->query("SELECT IdSerre, Nom FROM serre");
    $serres = $stmtSerre->fetchAll(PDO::FETCH_ASSOC);

    foreach ($serres as $serre) {
        echo "<option value='" . $serre["IdSerre"] . "'>" . $serre["Nom"] . "</option>";
    }
} catch (PDOException $e) {
    error_log("Erreur lors de la récupération des serres : " . $e->getMessage());
    // Ne pas afficher l'erreur directement sur la page en production
}
?>

getTableData.php :

<?php
require "connectDB.php";

if (isset($_GET['table'])) {
    $tableName = $_GET['table'];

    try {
        // Récupérer les noms de colonnes
        $stmt = $bdd->prepare("DESCRIBE " . $tableName);
        $stmt->execute();
        $columns = $stmt->fetchAll(PDO::FETCH_COLUMN);

        // Récupérer les données de la table
        $stmt = $bdd->prepare("SELECT * FROM " . $tableName);
        $stmt->execute();
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Ajouter une colonne "Modifier" au début et un bouton pour chaque ligne
        if ($tableName === 'capteur' || $tableName === 'carte') {
            array_unshift($columns, 'Actions'); // Ajouter "Modifier" au début des colonnes
            foreach ($rows as &$row) {
                $row['Actions'] = '<button class="modifyImage" data-id="' . $row['Id' . ucfirst($tableName)] . '">Modifier</button>';
                array_unshift($row, $row['Actions']); // Ajouter le bouton au début de chaque ligne
                unset($row['Actions']); // Supprimer l'élément "Modifier" en fin de ligne
            }
        }

        // Renvoyer les données au format JSON
        echo json_encode(['columns' => $columns, 'rows' => $rows]);
    } catch (PDOException $e) {
        echo json_encode(['error' => $e->getMessage()]);
    }
}
?>

insertData.php :

<?php
require "connectDB.php";

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $table = $_POST['table'];

    try {
        if ($table === 'capteur') {
            // On vérifie que toutes les données nécessaires existent
            $requiredFields = ['NomCapteur', 'GrandeurCapt', 'Unite', 'ValeurMin', 'ValeurMax', 'EtatComposant', 'IdCarte'];
            foreach ($requiredFields as $field) {
                if (!isset($_POST[$field])) {
                    echo json_encode([
                        'success' => false,
                        'error' => "Le champ '$field' est manquant !"
                    ]);
                    exit;
                }
            }

            // Prépare la requête d'insertion du capteur
            $stmt = $bdd->prepare("
                INSERT INTO capteur 
                    (NomCapteur, GrandeurCapt, Unite, ValeurMin, ValeurMax, EtatComposant, DateMiseEnService, IdCarte)
                VALUES 
                    (:NomCapteur, :GrandeurCapt, :Unite, :ValeurMin, :ValeurMax, :EtatComposant, NOW(), :IdCarte)
            ");

            $stmt->execute([
                ':NomCapteur'     => $_POST['NomCapteur'],
                ':GrandeurCapt'   => $_POST['GrandeurCapt'],
                ':Unite'          => $_POST['Unite'],
                ':ValeurMin'      => $_POST['ValeurMin'],
                ':ValeurMax'      => $_POST['ValeurMax'],
                ':EtatComposant'  => $_POST['EtatComposant'],
                ':IdCarte'        => $_POST['IdCarte']
            ]);

        } elseif ($table === 'carte') {
            // Vérifie les champs pour l'ajout d'une carte
            $requiredFields = ['NomCarte', 'EtatComposant'];
            foreach ($requiredFields as $field) {
                if (!isset($_POST[$field])) {
                    echo json_encode([
                        'success' => false,
                        'error' => "Le champ '$field' est manquant !"
                    ]);
                    exit;
                }
            }

            $stmt = $bdd->prepare("
                INSERT INTO carte 
                    (NomCarte, EtatComposant, DateMiseEnService)
                VALUES 
                    (:NomCarte, :EtatComposant, NOW())
            ");

            $stmt->execute([
                ':NomCarte'       => $_POST['NomCarte'],
                ':EtatComposant'  => $_POST['EtatComposant']
            ]);

        } else {
            echo json_encode([
                'success' => false,
                'error' => "Table non supportée"
            ]);
            exit;
        }

        echo json_encode(['success' => true]);

    } catch (PDOException $e) {
        echo json_encode([
            'success' => false,
            'error' => $e->getMessage()
        ]);
    }

} else {
    echo json_encode([
        'success' => false,
        'error' => "Requête invalide"
    ]);
}
?>

insertRow.php :

<?php
require "connectDB.php";

$response = ['success' => false];

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['table'])) {
    $table = $_POST['table'];

    try {
        // On récupère la structure de la table
        $stmt = $bdd->prepare("DESCRIBE " . $table);
        $stmt->execute();
        $columns = $stmt->fetchAll(PDO::FETCH_COLUMN);

        // On exclut les colonnes non modifiables
        $columns = array_filter($columns, function($col) {
            return !in_array($col, ['IdCapteur', 'DateMiseEnService']);
        });

        $insertCols = [];
        $insertVals = [];
        $params = [];

        foreach ($columns as $col) {
            if (isset($_POST[$col])) {
                $insertCols[] = $col;
                $insertVals[] = ':' . $col;
                $params[':' . $col] = $_POST[$col];
            }
        }

        // ➕ Ajoute DateMiseEnService avec la date actuelle ➕
        $insertCols[] = 'DateMiseEnService';
        $insertVals[] = 'NOW()';

        $sql = "INSERT INTO $table (" . implode(',', $insertCols) . ") VALUES (" . implode(',', $insertVals) . ")";
        $stmt = $bdd->prepare($sql);
        $stmt->execute($params);

        $response['success'] = true;

    } catch (PDOException $e) {
        $response['error'] = $e->getMessage();
    }
} else {
    $response['error'] = 'Requête invalide';
}

echo json_encode($response);
?>

deleteCapteur.php :

<?php
// Inclusion du fichier de connexion à la base de données
require_once 'connectDB.php'; 

// Vérifier que l'ID du capteur est passé via POST
if (isset($_POST['id'])) {
    $id = $_POST['id'];

    // Vérifier que l'ID est valide
    if (is_numeric($id)) {
        // Préparer la requête de suppression pour le capteur
        $query = "DELETE FROM capteurs WHERE idCapteur = :id";

        try {
            // Préparer la requête avec la connexion à la base de données
            $stmt = $pdo->prepare($query);
            $stmt->bindParam(':id', $id, PDO::PARAM_INT);
            $stmt->execute();

            // Vérifier si une ligne a été supprimée
            if ($stmt->rowCount() > 0) {
                echo json_encode(['success' => true]);
            } else {
                echo json_encode(['success' => false, 'error' => 'Aucun capteur trouvé avec cet ID']);
            }
        } catch (PDOException $e) {
            echo json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
    } else {
        echo json_encode(['success' => false, 'error' => 'ID invalide']);
    }
} else {
    echo json_encode(['success' => false, 'error' => 'Données manquantes']);
}
?>

deleteRow.php :

<?php
// Inclusion du fichier de connexion à la base de données
require_once 'connectDB.php'; 

// Vérifier que l'ID et la table sont bien passés via POST
if (isset($_POST['id']) && isset($_POST['table'])) {
    $id = $_POST['id'];
    $table = $_POST['table'];

    // Vérifier que l'ID est valide
    if (is_numeric($id)) {
        // Préparer la requête de suppression en fonction de la table
        if ($table === 'serre') {
            $query = "DELETE FROM serres WHERE idSerre = :id";
        } elseif ($table === 'carte') {
            $query = "DELETE FROM cartes WHERE idCarte = :id";
        } else {
            echo json_encode(['success' => false, 'error' => 'Table non supportée']);
            exit;
        }

        try {
            // Préparer la requête avec la connexion à la base de données
            $stmt = $pdo->prepare($query);
            $stmt->bindParam(':id', $id, PDO::PARAM_INT);
            $stmt->execute();

            // Vérifier si une ligne a été supprimée
            if ($stmt->rowCount() > 0) {
                echo json_encode(['success' => true]);
            } else {
                echo json_encode(['success' => false, 'error' => 'Aucun élément trouvé avec cet ID']);
            }
        } catch (PDOException $e) {
            echo json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
    } else {
        echo json_encode(['success' => false, 'error' => 'ID invalide']);
    }
} else {
    echo json_encode(['success' => false, 'error' => 'Données manquantes']);
}
?>

Consultation.js :

// Fonction pour afficher le modèle (modal)
function ouvertureModel() {
    document.getElementById('model').style.display = 'block';
}

// Fonction pour masquer le modèle (modal)
function fermetureModel() {
    document.getElementById('model').style.display = 'none';
}

function updateChart(capteurId1, capteurId2, canvas1, canvas2, startDate = null, startTime = null, endDate = null, endTime = null) {
    if (!capteurId1) {
      console.warn("Aucun capteur 1 sélectionné.");
      return;
    }
  
    // Fonction pour ajuster les canvas si besoin
    function adjustCanvasLayout(sameGrandeur) {
        if (sameGrandeur) {
            monGraphique.style.display = "block";
            monGraphique.style.width = "95%";
            monGraphique.style.heihgt = "95%";
            monGraphique2.style.width = "95%";
            monGraphique2.style.heihgt = "95%";
            monGraphique2.style.display = "none";
        } else {
            monGraphique.style.display = "block";
            monGraphique2.style.display = "block";
            monGraphique.style.width = "45%";
            monGraphique.style.heihgt = "95%";
            monGraphique2.style.width = "45%";
            monGraphique2.style.heihgt = "95%";
            monGraphique2.style.transform = "translateX(100%)";
        }
    }
  
    // Fonction générique pour récupérer les mesures
    function getMesures(capteurId) {
      let url = `getMesures.php?capteur_id=${capteurId}`;
      if (startDate && startTime && endDate && endTime) {
        url += `&startDate=${startDate}&startTime=${startTime}&endDate=${endDate}&endTime=${endTime}`;
      }
      return fetch(url).then(response => response.json());
    }
  
    // Récupérer les infos du capteur 1
    fetch(`getCapteurInfo.php?capteur_id=${capteurId1}`)
      .then(response => response.json())
      .then(capteurInfo1 => {
        const grandeur1 = capteurInfo1.GrandeurCapt;
        const unite1 = capteurInfo1.Unite;
  
        // Récupérer les mesures du capteur 1
        getMesures(capteurId1).then(data1 => {
          if (data1.error || data1.length === 0) {
            console.error("Erreur ou aucune donnée pour le capteur 1");
            return;
          }
  
          const labels1 = data1.map(m => m.Horodatage);
          const values1 = data1.map(m => parseFloat(m.Valeur));
  
          // Si aucun capteur 2 sélectionné => afficher uniquement capteur 1
          if (!capteurId2) {
            adjustCanvasLayout(true); // Pleine largeur
            renderChart(canvas1, labels1, [{
              label: `${grandeur1} (${unite1})`,
              data: values1,
              borderColor: 'rgb(231, 57, 57)',
              tension: 0.1
            }], unite1);
            updateInfoGraphique(values1, unite1);
            return;
          }
  
          // Sinon, récupérer infos du capteur 2
          fetch(`getCapteurInfo.php?capteur_id=${capteurId2}`)
            .then(response => response.json())
            .then(capteurInfo2 => {
              const grandeur2 = capteurInfo2.GrandeurCapt;
              const unite2 = capteurInfo2.Unite;
  
              getMesures(capteurId2).then(data2 => {
                if (data2.error || data2.length === 0) {
                  console.error("Erreur ou aucune donnée pour le capteur 2");
                  return;
                }
  
                const labels2 = data2.map(m => m.Horodatage);
                const values2 = data2.map(m => parseFloat(m.Valeur));
  
                if (grandeur1 === grandeur2) {
                  // Même grandeur => même graphique
                  adjustCanvasLayout(true);
                  renderChart(canvas1, labels1, [
                    {
                      label: `${grandeur1} (${unite1})`,
                      data: values1,
                      borderColor: 'rgb(231, 57, 57)',
                      tension: 0.1
                    },
                    {
                      label: `${grandeur2} (${unite2})`,
                      data: values2,
                      borderColor: 'rgb(54, 162, 235)',
                      tension: 0.1
                    }
                  ], unite1);
                  updateInfoGraphique(values1.concat(values2), unite1);
  
                } else {
                  // Grandeurs différentes => 2 graphiques
                  adjustCanvasLayout(false);
                  renderChart(canvas1, labels1, [{
                    label: `${grandeur1} (${unite1})`,
                    data: values1,
                    borderColor: 'rgb(231, 57, 57)',
                    tension: 0.1
                  }], unite1);
                  updateInfoGraphique(values1, unite1);
  
                  renderChart(canvas2, labels2, [{
                    label: `${grandeur2} (${unite2})`,
                    data: values2,
                    borderColor: 'rgb(54, 162, 235)',
                    tension: 0.1
                  }], unite2);
                  updateInfoGraphique(values2, unite2);
                }
  
              });
            });
        });
      });
  }
  
  // Fonction pour créer/mettre à jour un graphique sur un canvas
  function renderChart(canvas, labels, datasets, unite) {
    const ctx = canvas.getContext('2d');
    const dpr = window.devicePixelRatio || 1;
  
    // Ajuster la résolution
    canvas.style.height = '400px';
    canvas.width = canvas.offsetWidth * dpr;
    canvas.height = 400 * dpr;
    ctx.scale(dpr, dpr);
  
    // Détruire l'ancien graphique s'il existe
    if (canvas.myChart) {
      canvas.myChart.destroy();
    }
  
    // Créer un nouveau graphique
    canvas.myChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: datasets
      },
      options: {
        responsive: false,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: unite
            }
          }
        },
        plugins: {
          legend: {
            labels: {
              font: {
                family: 'Arial',
                size: 12
              }
            }
          }
        }
      }
    });
  }

// Fonction pour mettre à jour les informations du graphique (actuelle, min, max, moyenne)
function updateInfoGraphique(values, unite) {
    if (values && values.length > 0) {
        const actuelle = values[values.length - 1];
        const min = Math.min(...values);
        const max = Math.max(...values);
        const moyenne = values.reduce((acc, val) => acc + val, 0) / values.length;

        document.getElementById('infoGraphique').innerHTML = `
        <span style="display: inline-block; width: 24%; text-align: center;">Actuelle : ${actuelle.toFixed(2)} ${unite}</span>
        <span style="display: inline-block; width: 24%; text-align: center;">Minimum : ${min.toFixed(2)} ${unite}</span>
        <span style="display: inline-block; width: 24%; text-align: center;">Maximum : ${max.toFixed(2)} ${unite}</span>
        <span style="display: inline-block; width: 24%; text-align: center;">Moyenne : ${moyenne.toFixed(2)} ${unite}</span>`;
    } else {
        document.getElementById('infoGraphique').innerHTML = "Aucune donnée à afficher.";
    }
}

// Fonction pour mettre à jour le graphique avec les filtres de temps sélectionnés
function updateChartWithTimeRange() {
    const capteurId = document.getElementById('lstCapteur').value;
    const startDate = document.getElementById('startDate').value;
    const startTime = document.getElementById('startTime').value;
    const endDate = document.getElementById('endDate').value;
    const endTime = document.getElementById('endTime').value;
    

    updateChart(capteurId, startDate, startTime, endDate, endTime);
    fermetureModel();
}

function definirPlageTemporelleParDefaut() {
    var maintenant = new Date();
    var debut = new Date(maintenant);
    debut.setDate(maintenant.getDate() - 1); // 24 heures avant

    // Formater les dates et heures pour les champs de saisie
    var dateDebut = debut.toISOString().slice(0, 10);
    var heureDebut = debut.toTimeString().slice(0, 5);
    var dateFin = maintenant.toISOString().slice(0, 10);
    var heureFin = maintenant.toTimeString().slice(0, 5);

    // Définir les valeurs dans les champs de saisie
    document.getElementById('startDate').value = dateDebut;
    document.getElementById('startTime').value = heureDebut;
    document.getElementById('endDate').value = dateFin;
    document.getElementById('endTime').value = heureFin;

    // Mettre à jour le graphique avec la plage temporelle par défaut
    updateChartWithTimeRange();
}

function gererSelectionSerreAjout(serreId, chapelleId, carteId, capteurId) {
    document.getElementById(serreId).addEventListener('change', function () {
        var serreValue = this.value;
        if (serreValue) {
            fetch('getChapelles.php?serre_id=' + serreValue)
                .then(response => response.json())
                .then(chapelles => {
                    mettreAJourSelect(chapelleId, chapelles, 'IdChapelle', 'Nom');
                    reinitialiserSelects([carteId, capteurId]);
                    activerSelect(chapelleId);
                    desactiverSelects([carteId, capteurId]);
                });
        } else {
            reinitialiserSelects([chapelleId, carteId, capteurId]);
            desactiverSelects([chapelleId, carteId, capteurId]);
        }
    });
}

// Gestionnaire d'événement pour le chargement du DOM
document.addEventListener('DOMContentLoaded', function () {
    
    // Gestionnaire d'événement pour le changement de sélection de la serre
    document.getElementById('lstSerre').addEventListener('change', function () {
        var serreId = this.value;
        if (serreId) {
            // Récupérer les chapelles associées à la serre sélectionnée
            fetch('getChapelles.php?serre_id=' + serreId)
                .then(response => response.json())
                .then(chapelles => {
                    var chapelleSelect = document.getElementById('lstChapelle');
                    chapelleSelect.innerHTML = '<option value="">-- Sélectionnez une chapelle --</option>';
                    chapelles.forEach(chapelle => {
                        chapelleSelect.innerHTML += '<option value="' + chapelle.IdChapelle + '">' + chapelle.Nom + '</option>';
                    });
                    // Réinitialiser les sélecteurs de carte et de capteur
                    document.getElementById('lstCarte').innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
                    document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
                    // Activer le sélecteur de chapelle et désactiver les sélecteurs de carte et de capteur
                    document.getElementById('lstChapelle').removeAttribute('disabled');
                    document.getElementById('lstCarte').setAttribute('disabled', true);
                    document.getElementById('lstCapteur').setAttribute('disabled', true);
                });
        } else {
            // Réinitialiser tous les sélecteurs et les désactiver
            document.getElementById('lstChapelle').innerHTML = '<option value="">-- Sélectionnez une chapelle --</option>';
            document.getElementById('lstCarte').innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
            document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
            document.getElementById('lstChapelle').setAttribute('disabled', true);
            document.getElementById('lstCarte').setAttribute('disabled', true);
            document.getElementById('lstCapteur').setAttribute('disabled', true);
        }
    });

    // Gestionnaire d'événement pour le changement de sélection de la chapelle
    document.getElementById('lstChapelle').addEventListener('change', function () {
        // Récupère la valeur (l'ID) de la chapelle sélectionnée dans la liste déroulante.
        var chapelleId = this.value;
        // Vérifie si une chapelle est sélectionnée.
        if (chapelleId) {
            // Envoie une requête au serveur pour récupérer les cartes associées à la chapelle sélectionnée.
            fetch('getCartes.php?chapelle_id=' + chapelleId)
                // Convertit la réponse en JSON.
                .then(response => response.json())
                // Traite les données des cartes.
                .then(cartes => {
                    // Récupère l'élément select pour les cartes.
                    var carteSelect = document.getElementById('lstCarte');
                    // Réinitialise la liste des cartes avec une option par défaut.
                    carteSelect.innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
                    // Ajoute chaque carte comme une option dans la liste déroulante.
                    cartes.forEach(carte => {
                        carteSelect.innerHTML += '<option value="' + carte.IdCarte + '">' + carte.Nom + '</option>';
                    });
                    // Réinitialise la liste des capteurs avec une option par défaut.
                    document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
                    // Active la liste déroulante des cartes.
                    document.getElementById('lstCarte').removeAttribute('disabled');
                    // Désactive la liste déroulante des capteurs.
                    document.getElementById('lstCapteur').setAttribute('disabled', true);
                });
        } else {
            // Si aucune chapelle n'est sélectionnée, réinitialise et désactive les listes de cartes et de capteurs.
            document.getElementById('lstCarte').innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
            document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
            document.getElementById('lstCarte').setAttribute('disabled', true);
            document.getElementById('lstCapteur').setAttribute('disabled', true);
        }
    });

    document.getElementById('lstCarte').addEventListener('change', function () {
        // Récupère la valeur (l'ID) de la carte sélectionnée.
        var carteId = this.value;
        // Vérifie si une carte est sélectionnée.
        if (carteId) {
            // Envoie une requête au serveur pour récupérer les capteurs associés à la carte sélectionnée.
            fetch('getCapteurs.php?carte_id=' + carteId)
                .then(response => response.json())
                .then(capteurs => {
                    // Récupère l'élément select pour les capteurs.
                    var capteurSelect = document.getElementById('lstCapteur');
                    // Réinitialise la liste des capteurs.
                    capteurSelect.innerHTML = '<option value="">Sélectionnez un capteur</option>';
                    // Ajoute chaque capteur comme une option dans la liste déroulante.
                    capteurs.forEach(capteur => {
                        capteurSelect.innerHTML += '<option value="' + capteur.IdCapteur + '">' + capteur.Nom + '</option>';
                    });
                    // Active la liste déroulante des capteurs.
                    document.getElementById('lstCapteur').removeAttribute('disabled');
                });
        } else {
            // Si aucune carte n'est sélectionnée, réinitialise et désactive la liste des capteurs.
            document.getElementById('lstCapteur').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
            document.getElementById('lstCapteur').setAttribute('disabled', true);
        }
    });

    // Listeners sur les selects
    document.getElementById('lstCapteur').addEventListener('change', function () {
        const capteurId1 = this.value;
        const capteurId2 = document.getElementById('lstCapteur2').value;
        updateChart(capteurId1, capteurId2, document.getElementById('monGraphique'), document.getElementById('monGraphique2'));
    });

    //aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

    document.getElementById('lstSerre2').addEventListener('change', function () {
        var serreId = this.value;
        if (serreId) {
            // Récupérer les chapelles associées à la serre sélectionnée
            fetch('getChapelles.php?serre_id=' + serreId)
                .then(response => response.json())
                .then(chapelles => {
                    var chapelleSelect = document.getElementById('lstChapelle2');
                    chapelleSelect.innerHTML = '<option value="">-- Sélectionnez une chapelle --</option>';
                    chapelles.forEach(chapelle => {
                        chapelleSelect.innerHTML += '<option value="' + chapelle.IdChapelle + '">' + chapelle.Nom + '</option>';
                    });
                    // Réinitialiser les sélecteurs de carte et de capteur
                    document.getElementById('lstCarte2').innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
                    document.getElementById('lstCapteur2').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
                    // Activer le sélecteur de chapelle et désactiver les sélecteurs de carte et de capteur
                    document.getElementById('lstChapelle2').removeAttribute('disabled');
                    document.getElementById('lstCarte2').setAttribute('disabled', true);
                    document.getElementById('lstCapteur2').setAttribute('disabled', true);
                });
        } else {
            // Réinitialiser tous les sélecteurs et les désactiver
            document.getElementById('lstChapelle2').innerHTML = '<option value="">-- Sélectionnez une chapelle --</option>';
            document.getElementById('lstCarte2').innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
            document.getElementById('lstCapteur2').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
            document.getElementById('lstChapelle2').setAttribute('disabled', true);
            document.getElementById('lstCarte2').setAttribute('disabled', true);
            document.getElementById('lstCapteur2').setAttribute('disabled', true);
        }
    });

    // Gestionnaire d'événement pour le changement de sélection de la chapelle
    document.getElementById('lstChapelle2').addEventListener('change', function () {
        // Récupère la valeur (l'ID) de la chapelle sélectionnée dans la liste déroulante.
        var chapelleId = this.value;
        // Vérifie si une chapelle est sélectionnée.
        if (chapelleId) {
            // Envoie une requête au serveur pour récupérer les cartes associées à la chapelle sélectionnée.
            fetch('getCartes.php?chapelle_id=' + chapelleId)
                // Convertit la réponse en JSON.
                .then(response => response.json())
                // Traite les données des cartes.
                .then(cartes => {
                    // Récupère l'élément select pour les cartes.
                    var carteSelect = document.getElementById('lstCarte2');
                    // Réinitialise la liste des cartes avec une option par défaut.
                    carteSelect.innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
                    // Ajoute chaque carte comme une option dans la liste déroulante.
                    cartes.forEach(carte => {
                        carteSelect.innerHTML += '<option value="' + carte.IdCarte + '">' + carte.Nom + '</option>';
                    });
                    // Réinitialise la liste des capteurs avec une option par défaut.
                    document.getElementById('lstCapteur2').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
                    // Active la liste déroulante des cartes.
                    document.getElementById('lstCarte2').removeAttribute('disabled');
                    // Désactive la liste déroulante des capteurs.
                    document.getElementById('lstCapteur2').setAttribute('disabled', true);
                });
        } else {
            // Si aucune chapelle n'est sélectionnée, réinitialise et désactive les listes de cartes et de capteurs.
            document.getElementById('lstCarte2').innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
            document.getElementById('lstCapteur2').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
            document.getElementById('lstCarte2').setAttribute('disabled', true);
            document.getElementById('lstCapteur2').setAttribute('disabled', true);
        }
    });

    document.getElementById('lstCarte2').addEventListener('change', function () {
        // Récupère la valeur (l'ID) de la carte sélectionnée.
        var carteId = this.value;
        // Vérifie si une carte est sélectionnée.
        if (carteId) {
            // Envoie une requête au serveur pour récupérer les capteurs associés à la carte sélectionnée.
            fetch('getCapteurs.php?carte_id=' + carteId)
                .then(response => response.json())
                .then(capteurs => {
                    // Récupère l'élément select pour les capteurs.
                    var capteurSelect = document.getElementById('lstCapteur2');
                    // Réinitialise la liste des capteurs.
                    capteurSelect.innerHTML = '<option value="">Sélectionnez un capteur</option>';
                    // Ajoute chaque capteur comme une option dans la liste déroulante.
                    capteurs.forEach(capteur => {
                        capteurSelect.innerHTML += '<option value="' + capteur.IdCapteur + '">' + capteur.Nom + '</option>';
                    });
                    // Active la liste déroulante des capteurs.
                    document.getElementById('lstCapteur2').removeAttribute('disabled');
                });
        } else {
            // Si aucune carte n'est sélectionnée, réinitialise et désactive la liste des capteurs.
            document.getElementById('lstCapteur2').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
            document.getElementById('lstCapteur2').setAttribute('disabled', true);
        }
    });

    document.getElementById('lstCapteur2').addEventListener('change', function () {
        const capteurId1 = document.getElementById('lstCapteur').value;
        const capteurId2 = this.value;
        updateChart(capteurId1, capteurId2, document.getElementById('monGraphique'), document.getElementById('monGraphique2'));
    });

    // Sélection des valeurs par défaut pour la plage temporelle
    definirPlageTemporelleParDefaut();
    
    var serreIdParDefaut = 1;
    var chapelleIdParDefaut = 1;
    var carteIdParDefaut = 1;
    var capteurIdParDefaut = 1;

    // Sélection des valeurs par défaut
    selectionnerParDefaut('lstSerre', serreIdParDefaut, function () {
        selectionnerParDefaut('lstChapelle', chapelleIdParDefaut, function () {
            selectionnerParDefaut('lstCarte', carteIdParDefaut, function () {
                selectionnerParDefaut('lstCapteur', capteurIdParDefaut);
            });
        });
    });

    // Fonction pour sélectionner une valeur dans une liste déroulante et exécuter une fonction de rappel
    function selectionnerParDefaut(selectId, valeur, callback) {
        var select = document.getElementById(selectId);
        select.value = valeur;
        select.dispatchEvent(new Event('change')); // Déclenche l'événement 'change' pour mettre à jour les listes suivantes
        if (callback) {
            // Exécute la fonction de rappel après un court délai pour s'assurer que les listes sont mises à jour
            setTimeout(callback, 100);
        }
        updateChartWithTimeRange();
    }

    document.getElementById('supprimerCourbe').addEventListener('click', function () {
        // Supprime la dernière courbe ajoutée au graphique.
        supprimerCourbe();
    });

    function supprimerCourbe() {
        // Vérifie si le graphique existe et a plus d'un dataset (courbe).
        if (window.myLine && window.myLine.data.datasets.length > 1) {
            // Supprime le dernier dataset ajouté.
            window.myLine.data.datasets.pop();
            // Met à jour le graphique.
            window.myLine.update();
        } else {
            alert("Vous ne pouvez pas supprimer la courbe principale.");
        }
    }

    function ajouterDonneesCourbe(capteurId) {
        // Récupère les mesures du capteur à partir du serveur.
        fetch('getMesures.php?capteur_id=' + capteurId)
            // Convertit la réponse en JSON.
            .then(response => response.json())
            // Traite les données des mesures.
            .then(data => {
                // Vérifie s'il y a une erreur dans les données.
                if (data.error) {
                    // Affiche l'erreur dans la console et sort de la fonction.
                    console.error("Erreur lors de la récupération des mesures :", data.error);
                    return;
                }

                // Extrait les horodatages et les valeurs des mesures.
                const labels = data.map(mesure => mesure.Horodatage);
                const values = data.map(mesure => parseFloat(mesure.Valeur));

                // Vérifie si les données sont valides.
                if (labels && values && labels.length > 0 && values.length > 0) {
                    // Récupère les informations du capteur (grandeur et unité).
                    fetch('getCapteurInfo.php?capteur_id=' + capteurId)
                        // Convertit la réponse en JSON.
                        .then(response => response.json())
                        // Traite les informations du capteur.
                        .then(capteurInfo => {
                            // Extrait la grandeur et l'unité du capteur.
                            const grandeur = capteurInfo.GrandeurCapt;
                            const unite = capteurInfo.Unite;

                            // Ajoute un nouveau dataset au graphique existant.
                            window.myLine.data.datasets.push({
                                label: `${grandeur} (${unite})`,
                                data: values,
                                borderColor: getRandomColor(), // Génère une couleur aléatoire pour la courbe.
                                tension: 0.1
                            });

                            // Met à jour le graphique avec le nouveau dataset.
                            window.myLine.update();
                        })
                        // Gestion des erreurs lors de la récupération des informations du capteur.
                        .catch(error => {
                            console.error("Erreur lors de la récupération des informations du capteur :", error);
                        });
                } else {
                    // Affiche une erreur si les données du graphique sont invalides ou vides.
                    console.error("Données de graphique invalides ou vides.");
                }
            })
            // Gestion des erreurs lors de la récupération des données.
            .catch(error => {
                console.error("Erreur lors de la récupération des données :", error);
            });
    }

    function creerNouveauGraphique(capteurId) {
        // Récupère les mesures du capteur à partir du serveur.
        fetch('getMesures.php?capteur_id=' + capteurId)
            // Convertit la réponse en JSON.
            .then(response => response.json())
            // Traite les données des mesures.
            .then(data => {
                // Vérifie s'il y a une erreur dans les données.
                if (data.error) {
                    // Affiche l'erreur dans la console et sort de la fonction.
                    console.error("Erreur lors de la récupération des mesures :", data.error);
                    return;
                }

                // Extrait les horodatages et les valeurs des mesures.
                const labels = data.map(mesure => mesure.Horodatage);
                const values = data.map(mesure => parseFloat(mesure.Valeur));

                // Inverse les tableaux d'horodatages et de valeurs pour afficher les données dans l'ordre chronologique.
                labels.reverse();
                values.reverse();

                // Vérifie si les données sont valides.
                if (labels && values && labels.length > 0 && values.length > 0) {
                    // Récupère les informations du capteur (grandeur et unité).
                    fetch('getCapteurInfo.php?capteur_id=' + capteurId)
                        // Convertit la réponse en JSON.
                        .then(response => response.json())
                        // Traite les informations du capteur.
                        .then(capteurInfo => {
                            // Extrait la grandeur et l'unité du capteur.
                            const grandeur = capteurInfo.GrandeurCapt;
                            const unite = capteurInfo.Unite;

                            // Crée un nouvel élément canvas pour le nouveau graphique.
                            const nouveauCanvas = document.createElement('canvas');
                            // Définit un ID unique pour le nouveau canvas.
                            nouveauCanvas.id = 'nouveauGraphique_' + capteurId;
                            // Ajoute le nouveau canvas à la div des graphiques.
                            document.getElementById('divGraphiques').appendChild(nouveauCanvas);

                            // Obtient le contexte 2D du nouveau canvas.
                            const ctx = nouveauCanvas.getContext('2d');
                            // Obtient le ratio de pixels de l'appareil.
                            const dpr = window.devicePixelRatio || 1;

                            // Ajuste la taille du canvas pour les écrans haute résolution.
                            nouveauCanvas.style.width = nouveauCanvas.width + 'px';
                            nouveauCanvas.style.height = nouveauCanvas.height + 'px';
                            nouveauCanvas.width *= dpr;
                            nouveauCanvas.height *= dpr;

                            // Met à l'échelle le contexte 2D pour les écrans haute résolution.
                            ctx.scale(dpr, dpr);

                            // Crée un nouveau graphique Chart.js.
                            new Chart(ctx, {
                                type: 'line',
                                data: {
                                    labels: labels,
                                    datasets: [{
                                        label: `${grandeur} (${unite})`,
                                        data: values,
                                        borderColor: getRandomColor(),
                                        tension: 0.1
                                    }]
                                },
                                options: {
                                    scales: {
                                        y: {
                                            beginAtZero: true,
                                            title: {
                                                display: true,
                                                text: unite
                                            }
                                        }
                                    },
                                    plugins: {
                                        title: {
                                            display: true,
                                            text: `${grandeur} (${unite})`
                                        }
                                    },
                                    font: {
                                        family: 'Arial',
                                        size: 12,
                                        weight: 'normal'
                                    }
                                }
                            });
                        })
                        // Gestion des erreurs lors de la récupération des informations du capteur.
                        .catch(error => {
                            console.error("Erreur lors de la récupération des informations du capteur :", error);
                        });
                } else {
                    // Affiche une erreur si les données du graphique sont invalides ou vides.
                    console.error("Données de graphique invalides ou vides.");
                }
            })
            // Gestion des erreurs lors de la récupération des données.
            .catch(error => {
                console.error("Erreur lors de la récupération des données :", error);
            });
    }

    function getRandomColor() {
        // Génère une couleur hexadécimale aléatoire.
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    document.getElementById('ajoutCourbe').addEventListener('click', function () {
        // Affiche la div pour ajouter une courbe et masque le menu d'ajout de courbe.
        document.getElementById('ajoutCourbeDiv').style.display = 'block';
    });

    document.getElementById('closeAjoutCourbe').addEventListener('click', function () {
        // Masque la div pour ajouter une courbe.
        document.getElementById('ajoutCourbeDiv').style.display = 'none';
    });

    document.getElementById('validerAjoutCourbe').addEventListener('click', function () {
        // Récupère l'ID du capteur sélectionné dans la liste déroulante.
        var capteurId = document.getElementById('lstCapteurAjout').value;
        // Ajoute la courbe au graphique.
        ajouterDonneesCourbe(capteurId);
        // Masque la div pour ajouter une courbe.
        document.getElementById('ajoutCourbeDiv').style.display = 'none';
    });

    // Gestionnaires d'événements pour les sélecteurs de capteurs dans ajoutCourbeDiv (Graphique n°1)
    gererSelectionSerreAjout('lstSerreAjout', 'lstChapelleAjout', 'lstCarteAjout', 'lstCapteurAjout');

    document.getElementById('closePlage').addEventListener('click', function () {
        // Masque le modèle (modal).
        document.getElementById('model').style.display = 'none';
    });

    // Gestionnaires d'événements pour les sélecteurs de capteurs dans ajoutCourbeDiv
    document.getElementById('lstSerreAjout').addEventListener('change', function () {
        // Récupère l'ID de la serre sélectionnée.
        var serreId = this.value;
        // Vérifie si une serre est sélectionnée.
        if (serreId) {
            // Envoie une requête au serveur pour récupérer les chapelles associées à la serre.
            fetch('getChapelles.php?serre_id=' + serreId)
                // Convertit la réponse en JSON.
                .then(response => response.json())
                // Traite les données des chapelles.
                .then(chapelles => {
                    // Récupère l'élément select pour les chapelles.
                    var chapelleSelect = document.getElementById('lstChapelleAjout');
                    // Réinitialise la liste des chapelles avec une option par défaut.
                    chapelleSelect.innerHTML = '<option value="">-- Sélectionnez une chapelle --</option>';
                    // Ajoute chaque chapelle comme une option dans la liste déroulante.
                    chapelles.forEach(chapelle => {
                        chapelleSelect.innerHTML += '<option value="' + chapelle.IdChapelle + '">' + chapelle.Nom + '</option>';
                    });
                    // Réinitialise les listes de cartes et de capteurs.
                    document.getElementById('lstCarteAjout').innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
                    document.getElementById('lstCapteurAjout').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
                    // Active la liste déroulante des chapelles et désactive celles des cartes et des capteurs.
                    document.getElementById('lstChapelleAjout').removeAttribute('disabled');
                    document.getElementById('lstCarteAjout').setAttribute('disabled', true);
                    document.getElementById('lstCapteurAjout').setAttribute('disabled', true);
                });
        } else {
            // Si aucune serre n'est sélectionnée, réinitialise et désactive toutes les listes.
            document.getElementById('lstChapelleAjout').innerHTML = '<option value="">-- Sélectionnez une chapelle --</option>';
            document.getElementById('lstCarteAjout').innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
            document.getElementById('lstCapteurAjout').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
            document.getElementById('lstChapelleAjout').setAttribute('disabled', true);
            document.getElementById('lstCarteAjout').setAttribute('disabled', true);
            document.getElementById('lstCapteurAjout').setAttribute('disabled', true);
        }
    });

    document.getElementById('lstChapelleAjout').addEventListener('change', function () {
        // Récupère l'ID de la chapelle sélectionnée.
        var chapelleId = this.value;
        // Vérifie si une chapelle est sélectionnée.
        if (chapelleId) {
            // Envoie une requête au serveur pour récupérer les cartes associées à la chapelle.
            fetch('getCartes.php?chapelle_id=' + chapelleId)
                // Convertit la réponse en JSON.
                .then(response => response.json())
                // Traite les données des cartes.
                .then(cartes => {
                    // Récupère l'élément select pour les cartes.
                    var carteSelect = document.getElementById('lstCarteAjout');
                    // Réinitialise la liste des cartes avec une option par défaut.
                    carteSelect.innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
                    // Ajoute chaque carte comme une option dans la liste déroulante.
                    cartes.forEach(carte => {
                        carteSelect.innerHTML += '<option value="' + carte.IdCarte + '">' + carte.Nom + '</option>';
                    });
                    // Réinitialise la liste des capteurs.
                    document.getElementById('lstCapteurAjout').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
                    // Active la liste déroulante des cartes et désactive celle des capteurs.
                    document.getElementById('lstCarteAjout').removeAttribute('disabled');
                    document.getElementById('lstCapteurAjout').setAttribute('disabled', true);
                });
        } else {
            // Si aucune chapelle n'est sélectionnée, réinitialise et désactive les listes de cartes et de capteurs.
            document.getElementById('lstCarteAjout').innerHTML = '<option value="">-- Sélectionnez une carte --</option>';
            document.getElementById('lstCapteurAjout').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
            document.getElementById('lstCarteAjout').setAttribute('disabled', true);
            document.getElementById('lstCapteurAjout').setAttribute('disabled', true);
        }
    });

    document.getElementById('lstCarteAjout').addEventListener('change', function () {
        // Récupère l'ID de la carte sélectionnée.
        var carteId = this.value;
        // Vérifie si une carte est sélectionnée.
        if (carteId) {
            // Envoie une requête au serveur pour récupérer les capteurs associés à la carte.
            fetch('getCapteurs.php?carte_id=' + carteId)
                // Convertit la réponse en JSON.
                .then(response => response.json())
                // Traite les données des capteurs.
                .then(capteurs => {
                    // Récupère l'élément select pour les capteurs.
                    var capteurSelect = document.getElementById('lstCapteurAjout');
                    // Réinitialise la liste des capteurs.
                    capteurSelect.innerHTML = '<option value="">Sélectionnez un capteur</option>';
                    // Ajoute chaque capteur comme une option dans la liste déroulante.
                    capteurs.forEach(capteur => {
                        capteurSelect.innerHTML += '<option value="' + capteur.IdCapteur + '">' + capteur.Nom + '</option>';
                    });
                    // Active la liste déroulante des capteurs.
                    document.getElementById('lstCapteurAjout').removeAttribute('disabled');
                });
        } else {
            // Si aucune carte n'est sélectionnée, réinitialise et désactive la liste des capteurs.
            document.getElementById('lstCapteurAjout').innerHTML = '<option value="">-- Sélectionnez un capteur --</option>';
            document.getElementById('lstCapteurAjout').setAttribute('disabled', true);
        }
    });

    document.getElementById('lstCapteurAjout').addEventListener('change', function () {
        // Récupère l'ID du capteur sélectionné.
        var capteurId = this.value;
        // (Note: Cette ligne ne fait rien d'autre que de stocker l'ID du capteur,
        //  il est probable qu'elle soit utilisée ailleurs dans le code.)
    });

    function ouvertureModelAjout() {
        // Affiche le modèle (modal).
        document.getElementById('model').style.display = 'block';
    }

    function formaterHorodatage(horodatage) {
        // Formate un horodatage en une chaîne de caractères lisible.
        const date = new Date(horodatage);
        const jour = String(date.getDate()).padStart(2, '0');
        const mois = String(date.getMonth() + 1).padStart(2, '0');
        const annee = date.getFullYear();
        const heures = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const secondes = String(date.getSeconds()).padStart(2, '0');
        return `<span class="math-inline">\{jour\}/</span>{mois}/${annee} <span class="math-inline">\{heures\}\:</span>{minutes}:${secondes}`;
    }

    function telechargerCSV() {
        // Télécharge les données du graphique actuel au format CSV.
        if (window.myLine && window.myLine.data.labels.length > 0) {
            // Récupère les labels (horodatages) et les datasets du graphique.
            const labels = window.myLine.data.labels;
            const datasets = window.myLine.data.datasets;

            // Initialise le contenu CSV avec l'en-tête.
            let csvContent = "data:text/csv;charset=utf-8,";
            csvContent += "Horodatage,";

            // Ajoute les noms des datasets comme en-têtes de colonnes.
            datasets.forEach(dataset => {
                csvContent += dataset.label + ",";
            });
            csvContent = csvContent.slice(0, -1) + "\n"; // Supprime la virgule finale et ajoute une nouvelle ligne.

            // Ajoute les données de chaque ligne.
            for (let i = 0; i < labels.length; i++) {
                const horodatage = formaterHorodatage(labels[i]); // Formate l'horodatage.
                csvContent += horodatage + ",";

                // Ajouter les données de chaque dataset
                datasets.forEach(dataset => {
                    // Pour chaque dataset, ajoute la valeur correspondante à l'index 'i' au contenu CSV, suivie d'une virgule.
                    csvContent += dataset.data[i] + ",";
                });
                // Supprime la dernière virgule ajoutée à la ligne et ajoute un saut de ligne pour passer à la ligne suivante.
                csvContent = csvContent.slice(0, -1) + "\n";
            }

            // Encode l'URI du contenu CSV pour le téléchargement.
            const encodedUri = encodeURI(csvContent);
            // Crée un élément lien (<a>) pour le téléchargement.
            const link = document.createElement("a");
            // Définit l'attribut 'href' du lien avec l'URI encodé du contenu CSV.
            link.setAttribute("href", encodedUri);
            // Définit l'attribut 'download' du lien avec le nom du fichier CSV à télécharger.
            link.setAttribute("download", "donnees_graphique.csv");
            // Ajoute le lien au corps du document HTML.
            document.body.appendChild(link);
            // Simule un clic sur le lien pour lancer le téléchargement du fichier.
            link.click();
            // Supprime le lien du corps du document après le téléchargement.
            document.body.removeChild(link);
        } else {
            // Affiche une alerte si aucune donnée n'est disponible pour le téléchargement (si le graphique est vide).
            alert("Aucune donnée à télécharger.");
        }

        // Ajoute un gestionnaire d'événements au bouton de téléchargement de la courbe.
        document.getElementById('telechargeCourbe').addEventListener('click', function () {
            // Appelle la fonction 'telechargerCSV' pour lancer le processus de téléchargement du fichier CSV.
            telechargerCSV();
        });
    }
});

Parametrage.js :

document.addEventListener('DOMContentLoaded', function() {
    const selectSerre = document.getElementById('selectSerre');
    const selectChapelle = document.getElementById('selectChapelle');
    const selectCarte = document.getElementById('selectCarte');
    const selectCapteur = document.getElementById('selectCapteur');
    const selectUtilisateur = document.getElementById('selectUtilisateur');
    const tableHeader = document.querySelector('.tabParametrage thead tr');
    const tableBody = document.querySelector('.tabParametrage tbody');

    let currentTable = 'capteur'; // Table par défaut au chargement

    // Boutons de sélection
    selectSerre.addEventListener('click', () => updateTable('serre'));
    selectChapelle.addEventListener('click', () => updateTable('chapelle'));
    selectCarte.addEventListener('click', () => updateTable('carte'));
    selectCapteur.addEventListener('click', () => updateTable('capteur'));
    selectUtilisateur.addEventListener('click', () => updateTable('utilisateur'));

    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', () => filterTable(searchInput.value.toLowerCase()));

    function filterTable(searchTerm) {
        const rows = document.querySelectorAll('.divTableau tbody tr');
        rows.forEach(row => {
            let found = false;
            row.querySelectorAll('td').forEach(cell => {
                if (cell.textContent.toLowerCase().includes(searchTerm)) {
                    found = true;
                }
            });
            row.style.display = found ? '' : 'none';
        });
    }

    async function updateTable(tableName) {
        currentTable = tableName;

        document.querySelectorAll('.selectionTable button').forEach(button => {
            button.classList.remove('active');
            if (button.id === 'select' + tableName.charAt(0).toUpperCase() + tableName.slice(1)) {
                button.classList.add('active');
            }
        });

        filterTable(searchInput.value.toLowerCase());

        try {
            const response = await fetch('getTableData.php?table=' + tableName);
            const data = await response.json();

            tableHeader.innerHTML = '';
            data.columns.forEach(column => {
                const th = document.createElement('th');
                th.textContent = column;

                if (column === "Actions" && (tableName === 'carte' || tableName === 'capteur')) {
                    const addButton = document.createElement('img');
                    addButton.src = '../img/plus.svg';
                    addButton.alt = 'Ajouter';
                    addButton.classList.add('addImage');
                    addButton.style.cursor = 'pointer';
                    addButton.title = 'Ajouter';
                    addButton.addEventListener('click', openAddModal);
                    th.appendChild(addButton);
                }

                tableHeader.appendChild(th);
            });

            tableBody.innerHTML = '';
            data.rows.forEach(row => {
                const tr = document.createElement('tr');
                data.columns.forEach(column => {
                    const td = document.createElement('td');

                    if (column === "Actions") {
                        const modifyButton = document.createElement('img');
                        modifyButton.src = '../img/modifier.svg';
                        modifyButton.alt = 'Modifier';
                        modifyButton.classList.add('modifyImage');
                        const idKey = Object.keys(row).find(key => key.toLowerCase().includes('id'));
                        modifyButton.setAttribute('data-id', row[idKey]);
                        modifyButton.style.cursor = 'pointer';

                        const deleteButton = document.createElement('img');
                        deleteButton.src = '../img/moins.svg';
                        deleteButton.alt = 'Supprimer';
                        deleteButton.classList.add('deleteImage');
                        deleteButton.setAttribute('data-id', row[idKey]);
                        deleteButton.style.cursor = 'pointer';

                        td.appendChild(modifyButton);
                        td.appendChild(deleteButton);
                    } else {
                        td.textContent = row[column];
                    }
                    tr.appendChild(td);
                });
                tableBody.appendChild(tr);
            });

            document.querySelectorAll('.modifyImage').forEach(button => {
                button.addEventListener('click', function() {
                    const id = this.getAttribute('data-id');
                    console.log(`Modifier ${currentTable} avec l'ID ${id}`);
                    // Ta logique de modification ici
                });
            });

            document.querySelectorAll('.deleteImage').forEach(button => {
                button.addEventListener('click', function() {
                    const id = this.getAttribute('data-id');
                    console.log(`Suppression ${currentTable} avec l'ID ${id}`);
                    deleteRow(currentTable, id);
                });
            });

        } catch (error) {
            console.error('Erreur lors de la mise à jour du tableau:', error);
        }
    }

    async function deleteRow(tableName, id) {
        try {
            const response = await fetch('deleteRow.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `table=${tableName}&id=${id}`
            });
    
            const result = await response.json();
            if (result.success) {
                alert('Suppression réussie !');
                updateTable(currentTable); // Mettre à jour le tableau après suppression
            } else {
                alert('Erreur lors de la suppression : ' + result.error);
            }
        } catch (error) {
            console.error('Erreur lors de la suppression :', error);
            alert('Erreur lors de la suppression. Veuillez réessayer.');
        }
    }    

    // Modale d'ajout pour Carte/Capteur
    async function openAddModal() {
        try {
            const response = await fetch('getTableData.php?table=' + currentTable);
            const data = await response.json();
    
            const columns = data.columns.filter(col =>
                col !== 'Actions' &&
                col !== 'IdCapteur' &&
                col !== 'DateMiseEnService'
            );
    
            const selectOptions = await fetchSelectOptions();
    
            const modal = document.createElement('div');
            modal.classList.add('modal');
    
            const form = document.createElement('form');
            form.classList.add('modal-form');
    
            const title = document.createElement('h2');
            title.textContent = `Ajouter un ${currentTable}`;
            form.appendChild(title);
    
            columns.forEach(column => {
                const label = document.createElement('label');
                label.setAttribute('for', column);
    
                let input;
    
                if (column === 'EtatComposant') {
                    label.textContent = 'État du composant';
                    input = document.createElement('select');
                    selectOptions.EtatComposant.forEach(opt => {
                        const option = document.createElement('option');
                        option.value = opt;
                        option.textContent = opt;
                        input.appendChild(option);
                    });
    
                } else if (column === 'GrandeurCapt') {
                    label.textContent = 'Grandeur du capteur';
                    input = document.createElement('select');
                    selectOptions.GrandeurCapt.forEach(opt => {
                        const option = document.createElement('option');
                        option.value = opt;
                        option.textContent = opt;
                        input.appendChild(option);
                    });
    
                } else if (column === 'Unite') {
                    label.textContent = 'Unité';
                    input = document.createElement('select');
    
                    if (selectOptions.Unite && selectOptions.Unite.length > 0) {
                        selectOptions.Unite.forEach(unite => {
                            const option = document.createElement('option');
                            option.value = unite;
                            option.textContent = unite;
                            input.appendChild(option);
                        });
                    } else {
                        const option = document.createElement('option');
                        option.value = '';
                        option.textContent = 'Aucune unité disponible';
                        input.appendChild(option);
                    }
    
                } else {
                    label.textContent = column;
                    input = document.createElement('input');
                    input.type = 'text';
                    input.name = column;
                    input.required = true;
                }
    
                input.name = column;
                input.id = column;
    
                form.appendChild(label);
                form.appendChild(input);
            });
    
            // Sélection de la carte seulement pour les capteurs
            if (currentTable === 'capteur') {
                const labelCarte = document.createElement('label');
                labelCarte.setAttribute('for', 'IdCarte');
                labelCarte.textContent = 'Carte associée';
    
                const selectCarte = document.createElement('select');
                selectCarte.name = 'IdCarte';
                selectCarte.id = 'IdCarte';
    
                if (selectOptions.Cartes && selectOptions.Cartes.length > 0) {
                    selectOptions.Cartes.forEach(carte => {
                        const option = document.createElement('option');
                        option.value = carte.IdCarte;
                        option.textContent = carte.NomCarte || `Carte #${carte.IdCarte}`;
                        selectCarte.appendChild(option);
                    });
                } else {
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = 'Aucune carte disponible';
                    selectCarte.appendChild(option);
                }
    
                form.appendChild(labelCarte);
                form.appendChild(selectCarte);
            }
    
            const buttonContainer = document.createElement('div');
            buttonContainer.classList.add('modal-buttons');
    
            const submitButton = document.createElement('button');
            submitButton.type = 'submit';
            submitButton.textContent = 'Ajouter';
    
            const cancelButton = document.createElement('button');
            cancelButton.type = 'button';
            cancelButton.textContent = 'Annuler';
    
            buttonContainer.appendChild(submitButton);
            buttonContainer.appendChild(cancelButton);
            form.appendChild(buttonContainer);
    
            modal.appendChild(form);
            document.body.appendChild(modal);
    
            modal.style.display = 'flex';
    
            cancelButton.addEventListener('click', () => {
                modal.remove();
            });
    
            form.addEventListener('submit', async function (e) {
                e.preventDefault();
    
                const formData = new FormData(form);
                formData.append('table', currentTable);
    
                try {
                    const response = await fetch('insertRow.php', {
                        method: 'POST',
                        body: formData
                    });
    
                    const result = await response.json();
    
                    if (result.success) {
                        alert('Ajout réussi !');
                        modal.remove();
                        updateTable(currentTable);
                    } else {
                        alert('Erreur lors de l\'ajout : ' + result.error);
                    }
                } catch (err) {
                    console.error(err);
                    alert('Erreur lors de l\'ajout.');
                }
            });
    
        } catch (error) {
            console.error('Erreur lors de l\'ouverture de la modale :', error);
        }
    }    

    async function fetchSelectOptions() {
        try {
            const response = await fetch('getSelectOptions.php');
            const options = await response.json();
    
            console.log('Options reçues :', options);
    
            // Sécurise les valeurs attendues
            if (!options.Cartes) options.Cartes = [];
            if (!options.EtatComposant) options.EtatComposant = [];
            if (!options.GrandeurCapt) options.GrandeurCapt = [];
            if (!options.Unite) options.Unite = [];
    
            return options;
    
        } catch (error) {
            console.error('Erreur lors du chargement des options de select:', error);
            return {
                EtatComposant: [],
                GrandeurCapt: [],
                Cartes: [],
                Unite: []
            };
        }
    }

    updateTable('capteur');
});